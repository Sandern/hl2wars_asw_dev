// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "cbase.h"
#include "npcevent.h"
#include "srcpy_entities.h"
#include "bone_setup.h"
#include "baseprojectile.h"
#include "basegrenade_shared.h"
#include "SkyCamera.h"
#include "ai_basenpc.h"
#include "modelentities.h"
#include "basetoggle.h"
#include "triggers.h"
#include "AI_Criteria.h"
#include "saverestore.h"
#include "saverestoretypes.h"
#include "vcollide_parse.h"
#include "iservervehicle.h"
#include "gib.h"
#include "spark.h"
#include "filters.h"
#include "EntityFlame.h"
#include "player_resource.h"
#include "props.h"
#include "physics_prop_ragdoll.h"
#include "nav_area.h"
#include "Sprite.h"
#include "SpriteTrail.h"
#include "smoke_trail.h"
#include "beam_shared.h"
#include "hl2wars_player.h"
#include "unit_base_shared.h"
#include "wars_func_unit.h"
#include "hl2wars_player_shared.h"
#include "wars_mapboundary.h"
#include "srcpy_util.h"
#include "wars_weapon.h"
#include "wars_flora.h"
#include "unit_sense.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "CUnitBase_pypp.hpp"

namespace bp = boost::python;

struct CUnitBase_wrapper : CUnitBase, bp::wrapper< CUnitBase > {

    CUnitBase_wrapper( )
    : CUnitBase( )
      , bp::wrapper< CUnitBase >(){
        // null constructor
    
    }

    virtual bool CanUserControl( ::CHL2WarsPlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CUnitBase, CanUserControl )
        PY_OVERRIDE_LOG( _entities, CUnitBase, CanUserControl )
        bp::override func_CanUserControl = this->get_override( "CanUserControl" );
        if( func_CanUserControl.ptr() != Py_None )
            try {
                return func_CanUserControl( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CUnitBase::CanUserControl( pPlayer );
            }
        else
            return this->CUnitBase::CanUserControl( pPlayer );
    }
    
    bool default_CanUserControl( ::CHL2WarsPlayer * pPlayer ) {
        return CUnitBase::CanUserControl( pPlayer );
    }

    virtual bool ClientCommand( ::CCommand const & args ) {
        PY_OVERRIDE_CHECK( CUnitBase, ClientCommand )
        PY_OVERRIDE_LOG( _entities, CUnitBase, ClientCommand )
        bp::override func_ClientCommand = this->get_override( "ClientCommand" );
        if( func_ClientCommand.ptr() != Py_None )
            try {
                return func_ClientCommand( boost::ref(args) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CUnitBase::ClientCommand( args );
            }
        else
            return this->CUnitBase::ClientCommand( args );
    }
    
    bool default_ClientCommand( ::CCommand const & args ) {
        return CUnitBase::ClientCommand( args );
    }

    virtual bool CustomCanBeSeen( ::CUnitBase * pUnit=0 ) {
        PY_OVERRIDE_CHECK( CUnitBase, CustomCanBeSeen )
        PY_OVERRIDE_LOG( _entities, CUnitBase, CustomCanBeSeen )
        bp::override func_CustomCanBeSeen = this->get_override( "CustomCanBeSeen" );
        if( func_CustomCanBeSeen.ptr() != Py_None )
            try {
                return func_CustomCanBeSeen( pUnit ? pUnit->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CUnitBase::CustomCanBeSeen( pUnit );
            }
        else
            return this->CUnitBase::CustomCanBeSeen( pUnit );
    }
    
    bool default_CustomCanBeSeen( ::CUnitBase * pUnit=0 ) {
        return CUnitBase::CustomCanBeSeen( pUnit );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        PY_OVERRIDE_CHECK( CUnitBase, DoImpactEffect )
        PY_OVERRIDE_LOG( _entities, CUnitBase, DoImpactEffect )
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::DoImpactEffect( tr, nDamageType );
            }
        else
            this->CUnitBase::DoImpactEffect( tr, nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        CUnitBase::DoImpactEffect( tr, nDamageType );
    }

    virtual ::IMouse * GetIMouse(  ) {
        PY_OVERRIDE_CHECK( CUnitBase, GetIMouse )
        PY_OVERRIDE_LOG( _entities, CUnitBase, GetIMouse )
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CUnitBase::GetIMouse(  );
            }
        else
            return this->CUnitBase::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return CUnitBase::GetIMouse( );
    }

    virtual char const * GetTracerType(  ) {
        PY_OVERRIDE_CHECK( CUnitBase, GetTracerType )
        PY_OVERRIDE_LOG( _entities, CUnitBase, GetTracerType )
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CUnitBase::GetTracerType(  );
            }
        else
            return this->CUnitBase::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return CUnitBase::GetTracerType( );
    }

    virtual bool IsSelectableByPlayer( ::CHL2WarsPlayer * pPlayer, ::boost::python::api::object target_selection=boost::python::api::object() ) {
        PY_OVERRIDE_CHECK( CUnitBase, IsSelectableByPlayer )
        PY_OVERRIDE_LOG( _entities, CUnitBase, IsSelectableByPlayer )
        bp::override func_IsSelectableByPlayer = this->get_override( "IsSelectableByPlayer" );
        if( func_IsSelectableByPlayer.ptr() != Py_None )
            try {
                return func_IsSelectableByPlayer( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), target_selection );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CUnitBase::IsSelectableByPlayer( pPlayer, target_selection );
            }
        else
            return this->CUnitBase::IsSelectableByPlayer( pPlayer, target_selection );
    }
    
    bool default_IsSelectableByPlayer( ::CHL2WarsPlayer * pPlayer, ::boost::python::api::object target_selection=boost::python::api::object() ) {
        return CUnitBase::IsSelectableByPlayer( pPlayer, target_selection );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        PY_OVERRIDE_CHECK( CUnitBase, KeyValue )
        PY_OVERRIDE_LOG( _entities, CUnitBase, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CUnitBase::KeyValue( szKeyName, szValue );
            }
        else
            return this->CUnitBase::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return CUnitBase::KeyValue( szKeyName, szValue );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        PY_OVERRIDE_CHECK( CUnitBase, MakeTracer )
        PY_OVERRIDE_LOG( _entities, CUnitBase, MakeTracer )
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::MakeTracer( vecTracerSrc, tr, iTracerType );
            }
        else
            this->CUnitBase::MakeTracer( vecTracerSrc, tr, iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        CUnitBase::MakeTracer( vecTracerSrc, tr, iTracerType );
    }

    virtual void OnButtonsChanged( int buttonsMask, int buttonsChanged ) {
        PY_OVERRIDE_CHECK( CUnitBase, OnButtonsChanged )
        PY_OVERRIDE_LOG( _entities, CUnitBase, OnButtonsChanged )
        bp::override func_OnButtonsChanged = this->get_override( "OnButtonsChanged" );
        if( func_OnButtonsChanged.ptr() != Py_None )
            try {
                func_OnButtonsChanged( buttonsMask, buttonsChanged );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::OnButtonsChanged( buttonsMask, buttonsChanged );
            }
        else
            this->CUnitBase::OnButtonsChanged( buttonsMask, buttonsChanged );
    }
    
    void default_OnButtonsChanged( int buttonsMask, int buttonsChanged ) {
        CUnitBase::OnButtonsChanged( buttonsMask, buttonsChanged );
    }

    virtual void OnClickLeftDoublePressed( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( CUnitBase, OnClickLeftDoublePressed )
        PY_OVERRIDE_LOG( _entities, CUnitBase, OnClickLeftDoublePressed )
        bp::override func_OnClickLeftDoublePressed = this->get_override( "OnClickLeftDoublePressed" );
        if( func_OnClickLeftDoublePressed.ptr() != Py_None )
            try {
                func_OnClickLeftDoublePressed( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::OnClickLeftDoublePressed( player );
            }
        else
            this->CUnitBase::OnClickLeftDoublePressed( player );
    }
    
    void default_OnClickLeftDoublePressed( ::CHL2WarsPlayer * player ) {
        CUnitBase::OnClickLeftDoublePressed( player );
    }

    virtual void OnClickLeftPressed( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( CUnitBase, OnClickLeftPressed )
        PY_OVERRIDE_LOG( _entities, CUnitBase, OnClickLeftPressed )
        bp::override func_OnClickLeftPressed = this->get_override( "OnClickLeftPressed" );
        if( func_OnClickLeftPressed.ptr() != Py_None )
            try {
                func_OnClickLeftPressed( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::OnClickLeftPressed( player );
            }
        else
            this->CUnitBase::OnClickLeftPressed( player );
    }
    
    void default_OnClickLeftPressed( ::CHL2WarsPlayer * player ) {
        CUnitBase::OnClickLeftPressed( player );
    }

    virtual void OnClickLeftReleased( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( CUnitBase, OnClickLeftReleased )
        PY_OVERRIDE_LOG( _entities, CUnitBase, OnClickLeftReleased )
        bp::override func_OnClickLeftReleased = this->get_override( "OnClickLeftReleased" );
        if( func_OnClickLeftReleased.ptr() != Py_None )
            try {
                func_OnClickLeftReleased( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::OnClickLeftReleased( player );
            }
        else
            this->CUnitBase::OnClickLeftReleased( player );
    }
    
    void default_OnClickLeftReleased( ::CHL2WarsPlayer * player ) {
        CUnitBase::OnClickLeftReleased( player );
    }

    virtual void OnClickRightDoublePressed( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( CUnitBase, OnClickRightDoublePressed )
        PY_OVERRIDE_LOG( _entities, CUnitBase, OnClickRightDoublePressed )
        bp::override func_OnClickRightDoublePressed = this->get_override( "OnClickRightDoublePressed" );
        if( func_OnClickRightDoublePressed.ptr() != Py_None )
            try {
                func_OnClickRightDoublePressed( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::OnClickRightDoublePressed( player );
            }
        else
            this->CUnitBase::OnClickRightDoublePressed( player );
    }
    
    void default_OnClickRightDoublePressed( ::CHL2WarsPlayer * player ) {
        CUnitBase::OnClickRightDoublePressed( player );
    }

    virtual void OnClickRightPressed( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( CUnitBase, OnClickRightPressed )
        PY_OVERRIDE_LOG( _entities, CUnitBase, OnClickRightPressed )
        bp::override func_OnClickRightPressed = this->get_override( "OnClickRightPressed" );
        if( func_OnClickRightPressed.ptr() != Py_None )
            try {
                func_OnClickRightPressed( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::OnClickRightPressed( player );
            }
        else
            this->CUnitBase::OnClickRightPressed( player );
    }
    
    void default_OnClickRightPressed( ::CHL2WarsPlayer * player ) {
        CUnitBase::OnClickRightPressed( player );
    }

    virtual void OnClickRightReleased( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( CUnitBase, OnClickRightReleased )
        PY_OVERRIDE_LOG( _entities, CUnitBase, OnClickRightReleased )
        bp::override func_OnClickRightReleased = this->get_override( "OnClickRightReleased" );
        if( func_OnClickRightReleased.ptr() != Py_None )
            try {
                func_OnClickRightReleased( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::OnClickRightReleased( player );
            }
        else
            this->CUnitBase::OnClickRightReleased( player );
    }
    
    void default_OnClickRightReleased( ::CHL2WarsPlayer * player ) {
        CUnitBase::OnClickRightReleased( player );
    }

    virtual void OnCursorEntered( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( CUnitBase, OnCursorEntered )
        PY_OVERRIDE_LOG( _entities, CUnitBase, OnCursorEntered )
        bp::override func_OnCursorEntered = this->get_override( "OnCursorEntered" );
        if( func_OnCursorEntered.ptr() != Py_None )
            try {
                func_OnCursorEntered( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::OnCursorEntered( player );
            }
        else
            this->CUnitBase::OnCursorEntered( player );
    }
    
    void default_OnCursorEntered( ::CHL2WarsPlayer * player ) {
        CUnitBase::OnCursorEntered( player );
    }

    virtual void OnCursorExited( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( CUnitBase, OnCursorExited )
        PY_OVERRIDE_LOG( _entities, CUnitBase, OnCursorExited )
        bp::override func_OnCursorExited = this->get_override( "OnCursorExited" );
        if( func_OnCursorExited.ptr() != Py_None )
            try {
                func_OnCursorExited( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::OnCursorExited( player );
            }
        else
            this->CUnitBase::OnCursorExited( player );
    }
    
    void default_OnCursorExited( ::CHL2WarsPlayer * player ) {
        CUnitBase::OnCursorExited( player );
    }

    virtual void OnDeSelected( ::CHL2WarsPlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CUnitBase, OnDeSelected )
        PY_OVERRIDE_LOG( _entities, CUnitBase, OnDeSelected )
        bp::override func_OnDeSelected = this->get_override( "OnDeSelected" );
        if( func_OnDeSelected.ptr() != Py_None )
            try {
                func_OnDeSelected( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::OnDeSelected( pPlayer );
            }
        else
            this->CUnitBase::OnDeSelected( pPlayer );
    }
    
    void default_OnDeSelected( ::CHL2WarsPlayer * pPlayer ) {
        CUnitBase::OnDeSelected( pPlayer );
    }

    virtual void OnFullHealth(  ) {
        PY_OVERRIDE_CHECK( CUnitBase, OnFullHealth )
        PY_OVERRIDE_LOG( _entities, CUnitBase, OnFullHealth )
        bp::override func_OnFullHealth = this->get_override( "OnFullHealth" );
        if( func_OnFullHealth.ptr() != Py_None )
            try {
                func_OnFullHealth(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::OnFullHealth(  );
            }
        else
            this->CUnitBase::OnFullHealth(  );
    }
    
    void default_OnFullHealth(  ) {
        CUnitBase::OnFullHealth( );
    }

    virtual void OnLostFullHealth(  ) {
        PY_OVERRIDE_CHECK( CUnitBase, OnLostFullHealth )
        PY_OVERRIDE_LOG( _entities, CUnitBase, OnLostFullHealth )
        bp::override func_OnLostFullHealth = this->get_override( "OnLostFullHealth" );
        if( func_OnLostFullHealth.ptr() != Py_None )
            try {
                func_OnLostFullHealth(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::OnLostFullHealth(  );
            }
        else
            this->CUnitBase::OnLostFullHealth(  );
    }
    
    void default_OnLostFullHealth(  ) {
        CUnitBase::OnLostFullHealth( );
    }

    virtual void OnRestore(  ) {
        PY_OVERRIDE_CHECK( CUnitBase, OnRestore )
        PY_OVERRIDE_LOG( _entities, CUnitBase, OnRestore )
        bp::override func_OnRestore = this->get_override( "OnRestore" );
        if( func_OnRestore.ptr() != Py_None )
            try {
                func_OnRestore(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::OnRestore(  );
            }
        else
            this->CUnitBase::OnRestore(  );
    }
    
    void default_OnRestore(  ) {
        CUnitBase::OnRestore( );
    }

    virtual void OnSelected( ::CHL2WarsPlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CUnitBase, OnSelected )
        PY_OVERRIDE_LOG( _entities, CUnitBase, OnSelected )
        bp::override func_OnSelected = this->get_override( "OnSelected" );
        if( func_OnSelected.ptr() != Py_None )
            try {
                func_OnSelected( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::OnSelected( pPlayer );
            }
        else
            this->CUnitBase::OnSelected( pPlayer );
    }
    
    void default_OnSelected( ::CHL2WarsPlayer * pPlayer ) {
        CUnitBase::OnSelected( pPlayer );
    }

    virtual int OnTakeDamage( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CUnitBase, OnTakeDamage )
        PY_OVERRIDE_LOG( _entities, CUnitBase, OnTakeDamage )
        bp::override func_OnTakeDamage = this->get_override( "OnTakeDamage" );
        if( func_OnTakeDamage.ptr() != Py_None )
            try {
                return func_OnTakeDamage( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CUnitBase::OnTakeDamage( info );
            }
        else
            return this->CUnitBase::OnTakeDamage( info );
    }
    
    int default_OnTakeDamage( ::CTakeDamageInfo const & info ) {
        return CUnitBase::OnTakeDamage( info );
    }

    virtual int OnTakeDamage_Alive( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CUnitBase, OnTakeDamage_Alive )
        PY_OVERRIDE_LOG( _entities, CUnitBase, OnTakeDamage_Alive )
        bp::override func_OnTakeDamage_Alive = this->get_override( "OnTakeDamage_Alive" );
        if( func_OnTakeDamage_Alive.ptr() != Py_None )
            try {
                return func_OnTakeDamage_Alive( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CUnitBase::OnTakeDamage_Alive( info );
            }
        else
            return this->CUnitBase::OnTakeDamage_Alive( info );
    }
    
    int default_OnTakeDamage_Alive( ::CTakeDamageInfo const & info ) {
        return CUnitBase::OnTakeDamage_Alive( info );
    }

    virtual void OnUnitTypeChanged( char const * old_unit_type ) {
        PY_OVERRIDE_CHECK( CUnitBase, OnUnitTypeChanged )
        PY_OVERRIDE_LOG( _entities, CUnitBase, OnUnitTypeChanged )
        bp::override func_OnUnitTypeChanged = this->get_override( "OnUnitTypeChanged" );
        if( func_OnUnitTypeChanged.ptr() != Py_None )
            try {
                func_OnUnitTypeChanged( old_unit_type );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::OnUnitTypeChanged( old_unit_type );
            }
        else
            this->CUnitBase::OnUnitTypeChanged( old_unit_type );
    }
    
    void default_OnUnitTypeChanged( char const * old_unit_type ) {
        CUnitBase::OnUnitTypeChanged( old_unit_type );
    }

    virtual void OnUserControl( ::CHL2WarsPlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CUnitBase, OnUserControl )
        PY_OVERRIDE_LOG( _entities, CUnitBase, OnUserControl )
        bp::override func_OnUserControl = this->get_override( "OnUserControl" );
        if( func_OnUserControl.ptr() != Py_None )
            try {
                func_OnUserControl( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::OnUserControl( pPlayer );
            }
        else
            this->CUnitBase::OnUserControl( pPlayer );
    }
    
    void default_OnUserControl( ::CHL2WarsPlayer * pPlayer ) {
        CUnitBase::OnUserControl( pPlayer );
    }

    virtual void OnUserLeftControl( ::CHL2WarsPlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CUnitBase, OnUserLeftControl )
        PY_OVERRIDE_LOG( _entities, CUnitBase, OnUserLeftControl )
        bp::override func_OnUserLeftControl = this->get_override( "OnUserLeftControl" );
        if( func_OnUserLeftControl.ptr() != Py_None )
            try {
                func_OnUserLeftControl( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::OnUserLeftControl( pPlayer );
            }
        else
            this->CUnitBase::OnUserLeftControl( pPlayer );
    }
    
    void default_OnUserLeftControl( ::CHL2WarsPlayer * pPlayer ) {
        CUnitBase::OnUserLeftControl( pPlayer );
    }

    virtual void Order( ::CHL2WarsPlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CUnitBase, Order )
        PY_OVERRIDE_LOG( _entities, CUnitBase, Order )
        bp::override func_Order = this->get_override( "Order" );
        if( func_Order.ptr() != Py_None )
            try {
                func_Order( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::Order( pPlayer );
            }
        else
            this->CUnitBase::Order( pPlayer );
    }
    
    void default_Order( ::CHL2WarsPlayer * pPlayer ) {
        CUnitBase::Order( pPlayer );
    }

    virtual bool PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CUnitBase, PassesDamageFilter )
        PY_OVERRIDE_LOG( _entities, CUnitBase, PassesDamageFilter )
        bp::override func_PassesDamageFilter = this->get_override( "PassesDamageFilter" );
        if( func_PassesDamageFilter.ptr() != Py_None )
            try {
                return func_PassesDamageFilter( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CUnitBase::PassesDamageFilter( info );
            }
        else
            return this->CUnitBase::PassesDamageFilter( info );
    }
    
    bool default_PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        return CUnitBase::PassesDamageFilter( info );
    }

    virtual int Restore( ::IRestore & restore ) {
        PY_OVERRIDE_CHECK( CUnitBase, Restore )
        PY_OVERRIDE_LOG( _entities, CUnitBase, Restore )
        bp::override func_Restore = this->get_override( "Restore" );
        if( func_Restore.ptr() != Py_None )
            try {
                return func_Restore( boost::ref(restore) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CUnitBase::Restore( restore );
            }
        else
            return this->CUnitBase::Restore( restore );
    }
    
    int default_Restore( ::IRestore & restore ) {
        return CUnitBase::Restore( restore );
    }

    virtual void Select( ::CHL2WarsPlayer * pPlayer, bool bTriggerOnSel=true ) {
        PY_OVERRIDE_CHECK( CUnitBase, Select )
        PY_OVERRIDE_LOG( _entities, CUnitBase, Select )
        bp::override func_Select = this->get_override( "Select" );
        if( func_Select.ptr() != Py_None )
            try {
                func_Select( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), bTriggerOnSel );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::Select( pPlayer, bTriggerOnSel );
            }
        else
            this->CUnitBase::Select( pPlayer, bTriggerOnSel );
    }
    
    void default_Select( ::CHL2WarsPlayer * pPlayer, bool bTriggerOnSel=true ) {
        CUnitBase::Select( pPlayer, bTriggerOnSel );
    }

    virtual void Spawn(  ) {
        PY_OVERRIDE_CHECK( CUnitBase, Spawn )
        PY_OVERRIDE_LOG( _entities, CUnitBase, Spawn )
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::Spawn(  );
            }
        else
            this->CUnitBase::Spawn(  );
    }
    
    void default_Spawn(  ) {
        CUnitBase::Spawn( );
    }

    virtual void UpdateOnRemove(  ) {
        PY_OVERRIDE_CHECK( CUnitBase, UpdateOnRemove )
        PY_OVERRIDE_LOG( _entities, CUnitBase, UpdateOnRemove )
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::UpdateOnRemove(  );
            }
        else
            this->CUnitBase::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        CUnitBase::UpdateOnRemove( );
    }

    virtual int UpdateTransmitState(  ) {
        PY_OVERRIDE_CHECK( CUnitBase, UpdateTransmitState )
        PY_OVERRIDE_LOG( _entities, CUnitBase, UpdateTransmitState )
        bp::override func_UpdateTransmitState = this->get_override( "UpdateTransmitState" );
        if( func_UpdateTransmitState.ptr() != Py_None )
            try {
                return func_UpdateTransmitState(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CUnitBase::UpdateTransmitState(  );
            }
        else
            return this->CUnitBase::UpdateTransmitState(  );
    }
    
    int default_UpdateTransmitState(  ) {
        return CUnitBase::UpdateTransmitState( );
    }

    virtual void UserCmd( ::CUserCmd * pCmd ) {
        PY_OVERRIDE_CHECK( CUnitBase, UserCmd )
        PY_OVERRIDE_LOG( _entities, CUnitBase, UserCmd )
        bp::override func_UserCmd = this->get_override( "UserCmd" );
        if( func_UserCmd.ptr() != Py_None )
            try {
                func_UserCmd( boost::python::ptr(pCmd) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::UserCmd( pCmd );
            }
        else
            this->CUnitBase::UserCmd( pCmd );
    }
    
    void default_UserCmd( ::CUserCmd * pCmd ) {
        CUnitBase::UserCmd( pCmd );
    }

    virtual void Weapon_Equip( ::CBaseCombatWeapon * pWeapon ) {
        PY_OVERRIDE_CHECK( CUnitBase, Weapon_Equip )
        PY_OVERRIDE_LOG( _entities, CUnitBase, Weapon_Equip )
        bp::override func_Weapon_Equip = this->get_override( "Weapon_Equip" );
        if( func_Weapon_Equip.ptr() != Py_None )
            try {
                func_Weapon_Equip( pWeapon ? pWeapon->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CUnitBase::Weapon_Equip( pWeapon );
            }
        else
            this->CUnitBase::Weapon_Equip( pWeapon );
    }
    
    void default_Weapon_Equip( ::CBaseCombatWeapon * pWeapon ) {
        CUnitBase::Weapon_Equip( pWeapon );
    }

    virtual void Activate(  ) {
        PY_OVERRIDE_CHECK( CBaseAnimating, Activate )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, Activate )
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::Activate(  );
            }
        else
            this->CBaseAnimating::Activate(  );
    }
    
    void default_Activate(  ) {
        CBaseAnimating::Activate( );
    }

    virtual bool BecomeRagdoll( ::CTakeDamageInfo const & info, ::Vector const & forceVector ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, BecomeRagdoll )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, BecomeRagdoll )
        bp::override func_BecomeRagdoll = this->get_override( "BecomeRagdoll" );
        if( func_BecomeRagdoll.ptr() != Py_None )
            try {
                return func_BecomeRagdoll( boost::ref(info), boost::ref(forceVector) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::BecomeRagdoll( info, forceVector );
            }
        else
            return this->CBaseCombatCharacter::BecomeRagdoll( info, forceVector );
    }
    
    bool default_BecomeRagdoll( ::CTakeDamageInfo const & info, ::Vector const & forceVector ) {
        return CBaseCombatCharacter::BecomeRagdoll( info, forceVector );
    }

    virtual bool CanBecomeRagdoll(  ) {
        PY_OVERRIDE_CHECK( CBaseAnimating, CanBecomeRagdoll )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, CanBecomeRagdoll )
        bp::override func_CanBecomeRagdoll = this->get_override( "CanBecomeRagdoll" );
        if( func_CanBecomeRagdoll.ptr() != Py_None )
            try {
                return func_CanBecomeRagdoll(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::CanBecomeRagdoll(  );
            }
        else
            return this->CBaseAnimating::CanBecomeRagdoll(  );
    }
    
    bool default_CanBecomeRagdoll(  ) {
        return CBaseAnimating::CanBecomeRagdoll( );
    }

    virtual void ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        PY_OVERRIDE_CHECK( CBaseEntity, ComputeWorldSpaceSurroundingBox )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, ComputeWorldSpaceSurroundingBox )
        bp::override func_ComputeWorldSpaceSurroundingBox = this->get_override( "ComputeWorldSpaceSurroundingBox" );
        if( func_ComputeWorldSpaceSurroundingBox.ptr() != Py_None )
            try {
                func_ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
            }
        else
            this->CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
    }
    
    void default_ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
    }

    virtual bool CorpseGib( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, CorpseGib )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, CorpseGib )
        bp::override func_CorpseGib = this->get_override( "CorpseGib" );
        if( func_CorpseGib.ptr() != Py_None )
            try {
                return func_CorpseGib( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::CorpseGib( info );
            }
        else
            return this->CBaseCombatCharacter::CorpseGib( info );
    }
    
    bool default_CorpseGib( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::CorpseGib( info );
    }

    virtual bool CreateVPhysics(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, CreateVPhysics )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, CreateVPhysics )
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::CreateVPhysics(  );
            }
        else
            return this->CBaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return CBaseEntity::CreateVPhysics( );
    }

    virtual void DeathNotice( ::CBaseEntity * pVictim ) {
        PY_OVERRIDE_CHECK( CBaseEntity, DeathNotice )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, DeathNotice )
        bp::override func_DeathNotice = this->get_override( "DeathNotice" );
        if( func_DeathNotice.ptr() != Py_None )
            try {
                func_DeathNotice( pVictim ? pVictim->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DeathNotice( pVictim );
            }
        else
            this->CBaseEntity::DeathNotice( pVictim );
    }
    
    void default_DeathNotice( ::CBaseEntity * pVictim ) {
        CBaseEntity::DeathNotice( pVictim );
    }

    virtual void DrawDebugGeometryOverlays(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, DrawDebugGeometryOverlays )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, DrawDebugGeometryOverlays )
        bp::override func_DrawDebugGeometryOverlays = this->get_override( "DrawDebugGeometryOverlays" );
        if( func_DrawDebugGeometryOverlays.ptr() != Py_None )
            try {
                func_DrawDebugGeometryOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DrawDebugGeometryOverlays(  );
            }
        else
            this->CBaseEntity::DrawDebugGeometryOverlays(  );
    }
    
    void default_DrawDebugGeometryOverlays(  ) {
        CBaseEntity::DrawDebugGeometryOverlays( );
    }

    virtual int DrawDebugTextOverlays(  ) {
        PY_OVERRIDE_CHECK( CBaseAnimating, DrawDebugTextOverlays )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, DrawDebugTextOverlays )
        bp::override func_DrawDebugTextOverlays = this->get_override( "DrawDebugTextOverlays" );
        if( func_DrawDebugTextOverlays.ptr() != Py_None )
            try {
                return func_DrawDebugTextOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::DrawDebugTextOverlays(  );
            }
        else
            return this->CBaseAnimating::DrawDebugTextOverlays(  );
    }
    
    int default_DrawDebugTextOverlays(  ) {
        return CBaseAnimating::DrawDebugTextOverlays( );
    }

    virtual void EndTouch( ::CBaseEntity * pOther ) {
        PY_OVERRIDE_CHECK( CBaseEntity, EndTouch )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, EndTouch )
        bp::override func_EndTouch = this->get_override( "EndTouch" );
        if( func_EndTouch.ptr() != Py_None )
            try {
                func_EndTouch( pOther ? pOther->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::EndTouch( pOther );
            }
        else
            this->CBaseEntity::EndTouch( pOther );
    }
    
    void default_EndTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::EndTouch( pOther );
    }

    virtual bool Event_Gibbed( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, Event_Gibbed )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, Event_Gibbed )
        bp::override func_Event_Gibbed = this->get_override( "Event_Gibbed" );
        if( func_Event_Gibbed.ptr() != Py_None )
            try {
                return func_Event_Gibbed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::Event_Gibbed( info );
            }
        else
            return this->CBaseCombatCharacter::Event_Gibbed( info );
    }
    
    bool default_Event_Gibbed( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::Event_Gibbed( info );
    }

    virtual void Event_Killed( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, Event_Killed )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, Event_Killed )
        bp::override func_Event_Killed = this->get_override( "Event_Killed" );
        if( func_Event_Killed.ptr() != Py_None )
            try {
                func_Event_Killed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatCharacter::Event_Killed( info );
            }
        else
            this->CBaseCombatCharacter::Event_Killed( info );
    }
    
    void default_Event_Killed( ::CTakeDamageInfo const & info ) {
        CBaseCombatCharacter::Event_Killed( info );
    }

    virtual void Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseEntity, Event_KilledOther )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, Event_KilledOther )
        bp::override func_Event_KilledOther = this->get_override( "Event_KilledOther" );
        if( func_Event_KilledOther.ptr() != Py_None )
            try {
                func_Event_KilledOther( pVictim ? pVictim->GetPyHandle() : boost::python::object(), boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Event_KilledOther( pVictim, info );
            }
        else
            this->CBaseEntity::Event_KilledOther( pVictim, info );
    }
    
    void default_Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        CBaseEntity::Event_KilledOther( pVictim, info );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return CBaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, int nValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, nValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, nValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, nValue );
    }
    
    bool default_KeyValue( char const * szKeyName, int nValue ) {
        return CBaseEntity::KeyValue( szKeyName, nValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, vecValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, vecValue );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return CBaseEntity::KeyValue( szKeyName, vecValue );
    }

    virtual void ModifyOrAppendCriteria( ::ResponseRules::CriteriaSet & set ) {
        PY_OVERRIDE_CHECK( CBaseAnimating, ModifyOrAppendCriteria )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, ModifyOrAppendCriteria )
        bp::override func_ModifyOrAppendCriteria = this->get_override( "ModifyOrAppendCriteria" );
        if( func_ModifyOrAppendCriteria.ptr() != Py_None )
            try {
                func_ModifyOrAppendCriteria( boost::ref(set) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::ModifyOrAppendCriteria( set );
            }
        else
            this->CBaseAnimating::ModifyOrAppendCriteria( set );
    }
    
    void default_ModifyOrAppendCriteria( ::ResponseRules::CriteriaSet & set ) {
        CBaseAnimating::ModifyOrAppendCriteria( set );
    }

    virtual void OnChangeOwnerNumber( int old_owner_number ) {
        PY_OVERRIDE_CHECK( CBaseEntity, OnChangeOwnerNumber )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, OnChangeOwnerNumber )
        bp::override func_OnChangeOwnerNumber = this->get_override( "OnChangeOwnerNumber" );
        if( func_OnChangeOwnerNumber.ptr() != Py_None )
            try {
                func_OnChangeOwnerNumber( old_owner_number );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::OnChangeOwnerNumber( old_owner_number );
            }
        else
            this->CBaseEntity::OnChangeOwnerNumber( old_owner_number );
    }
    
    void default_OnChangeOwnerNumber( int old_owner_number ) {
        CBaseEntity::OnChangeOwnerNumber( old_owner_number );
    }

    virtual void OnSequenceSet( int nOldSequence ) {
        PY_OVERRIDE_CHECK( CBaseAnimating, OnSequenceSet )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, OnSequenceSet )
        bp::override func_OnSequenceSet = this->get_override( "OnSequenceSet" );
        if( func_OnSequenceSet.ptr() != Py_None )
            try {
                func_OnSequenceSet( nOldSequence );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::OnSequenceSet( nOldSequence );
            }
        else
            this->CBaseAnimating::OnSequenceSet( nOldSequence );
    }
    
    void default_OnSequenceSet( int nOldSequence ) {
        CBaseAnimating::OnSequenceSet( nOldSequence );
    }

    virtual void PostClientActive(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, PostClientActive )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, PostClientActive )
        bp::override func_PostClientActive = this->get_override( "PostClientActive" );
        if( func_PostClientActive.ptr() != Py_None )
            try {
                func_PostClientActive(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostClientActive(  );
            }
        else
            this->CBaseEntity::PostClientActive(  );
    }
    
    void default_PostClientActive(  ) {
        CBaseEntity::PostClientActive( );
    }

    virtual void PostConstructor( char const * szClassname ) {
        PY_OVERRIDE_CHECK( CBaseEntity, PostConstructor )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, PostConstructor )
        bp::override func_PostConstructor = this->get_override( "PostConstructor" );
        if( func_PostConstructor.ptr() != Py_None )
            try {
                func_PostConstructor( szClassname );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostConstructor( szClassname );
            }
        else
            this->CBaseEntity::PostConstructor( szClassname );
    }
    
    void default_PostConstructor( char const * szClassname ) {
        CBaseEntity::PostConstructor( szClassname );
    }

    virtual void Precache(  ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, Precache )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, Precache )
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatCharacter::Precache(  );
            }
        else
            this->CBaseCombatCharacter::Precache(  );
    }
    
    void default_Precache(  ) {
        CBaseCombatCharacter::Precache( );
    }

    virtual void PyOnNewModel(  ){
        PY_OVERRIDE_CHECK( CBaseAnimating, PyOnNewModel )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, PyOnNewModel )
        bp::override func_OnNewModel = this->get_override( "OnNewModel" );
        if( func_OnNewModel.ptr() != Py_None )
            try {
                func_OnNewModel(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::PyOnNewModel(  );
            }
        else
            this->CBaseAnimating::PyOnNewModel(  );
    }
    
    virtual void default_OnNewModel(  ){
        CBaseAnimating::PyOnNewModel( );
    }

    virtual void PyPostOnNewModel(  ){
        PY_OVERRIDE_CHECK( CBaseAnimating, PyPostOnNewModel )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, PyPostOnNewModel )
        bp::override func_PostOnNewModel = this->get_override( "PostOnNewModel" );
        if( func_PostOnNewModel.ptr() != Py_None )
            try {
                func_PostOnNewModel(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::PyPostOnNewModel(  );
            }
        else
            this->CBaseAnimating::PyPostOnNewModel(  );
    }
    
    virtual void default_PostOnNewModel(  ){
        CBaseAnimating::PyPostOnNewModel( );
    }

    virtual bool ShouldGib( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, ShouldGib )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, ShouldGib )
        bp::override func_ShouldGib = this->get_override( "ShouldGib" );
        if( func_ShouldGib.ptr() != Py_None )
            try {
                return func_ShouldGib( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::ShouldGib( info );
            }
        else
            return this->CBaseCombatCharacter::ShouldGib( info );
    }
    
    bool default_ShouldGib( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::ShouldGib( info );
    }

    virtual void StartTouch( ::CBaseEntity * pOther ) {
        PY_OVERRIDE_CHECK( CBaseEntity, StartTouch )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, StartTouch )
        bp::override func_StartTouch = this->get_override( "StartTouch" );
        if( func_StartTouch.ptr() != Py_None )
            try {
                func_StartTouch( pOther ? pOther->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StartTouch( pOther );
            }
        else
            this->CBaseEntity::StartTouch( pOther );
    }
    
    void default_StartTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::StartTouch( pOther );
    }

    virtual void StopLoopingSounds(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, StopLoopingSounds )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, StopLoopingSounds )
        bp::override func_StopLoopingSounds = this->get_override( "StopLoopingSounds" );
        if( func_StopLoopingSounds.ptr() != Py_None )
            try {
                func_StopLoopingSounds(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StopLoopingSounds(  );
            }
        else
            this->CBaseEntity::StopLoopingSounds(  );
    }
    
    void default_StopLoopingSounds(  ) {
        CBaseEntity::StopLoopingSounds( );
    }

    virtual void VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        PY_OVERRIDE_CHECK( CBaseEntity, VPhysicsCollision )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, VPhysicsCollision )
        bp::override func_VPhysicsCollision = this->get_override( "VPhysicsCollision" );
        if( func_VPhysicsCollision.ptr() != Py_None )
            try {
                func_VPhysicsCollision( index, boost::python::ptr(pEvent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::VPhysicsCollision( index, pEvent );
            }
        else
            this->CBaseEntity::VPhysicsCollision( index, pEvent );
    }
    
    void default_VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        CBaseEntity::VPhysicsCollision( index, pEvent );
    }

    virtual void Weapon_Drop( ::CBaseCombatWeapon * pWeapon, ::Vector const * pvecTarget=0, ::Vector const * pVelocity=0 ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, Weapon_Drop )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, Weapon_Drop )
        bp::override func_Weapon_Drop = this->get_override( "Weapon_Drop" );
        if( func_Weapon_Drop.ptr() != Py_None )
            try {
                func_Weapon_Drop( pWeapon ? pWeapon->GetPyHandle() : boost::python::object(), boost::python::ptr(pvecTarget), boost::python::ptr(pVelocity) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatCharacter::Weapon_Drop( pWeapon, pvecTarget, pVelocity );
            }
        else
            this->CBaseCombatCharacter::Weapon_Drop( pWeapon, pvecTarget, pVelocity );
    }
    
    void default_Weapon_Drop( ::CBaseCombatWeapon * pWeapon, ::Vector const * pvecTarget=0, ::Vector const * pVelocity=0 ) {
        CBaseCombatCharacter::Weapon_Drop( pWeapon, pvecTarget, pVelocity );
    }

    virtual bool Weapon_Switch( ::CBaseCombatWeapon * pWeapon, int viewmodelindex=0 ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, Weapon_Switch )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, Weapon_Switch )
        bp::override func_Weapon_Switch = this->get_override( "Weapon_Switch" );
        if( func_Weapon_Switch.ptr() != Py_None )
            try {
                return func_Weapon_Switch( pWeapon ? pWeapon->GetPyHandle() : boost::python::object(), viewmodelindex );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::Weapon_Switch( pWeapon, viewmodelindex );
            }
        else
            return this->CBaseCombatCharacter::Weapon_Switch( pWeapon, viewmodelindex );
    }
    
    bool default_Weapon_Switch( ::CBaseCombatWeapon * pWeapon, int viewmodelindex=0 ) {
        return CBaseCombatCharacter::Weapon_Switch( pWeapon, viewmodelindex );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual ServerClass* GetServerClass() {
        PY_OVERRIDE_CHECK( CUnitBase, GetServerClass )
        if( PyObject_HasAttrString(GetPyInstance().ptr(), "pyServerClass") )
        {
            try
            {
                ServerClass *pServerClass = boost::python::extract<ServerClass *>( GetPyInstance().attr("pyServerClass") );
                if( pServerClass )
                    return pServerClass;
            }
            catch( bp::error_already_set & ) 
            {
                PyErr_Print();
            }
        }
        return CUnitBase::GetServerClass();
    }

    static int m_lifeState_Get( CUnitBase const & inst ) { return inst.m_lifeState.Get(); }

    static void m_lifeState_Set( CUnitBase & inst, int val ) { inst.m_lifeState.Set( val ); }

    static int m_takedamage_Get( CUnitBase const & inst ) { return inst.m_takedamage.Get(); }

    static void m_takedamage_Set( CUnitBase & inst, int val ) { inst.m_takedamage.Set( val ); }

    static int m_nSkin_Get( CUnitBase const & inst ) { return inst.m_nSkin.Get(); }

    static void m_nSkin_Set( CUnitBase & inst, int val ) { inst.m_nSkin.Set( val ); }

    static float m_fEyePitch_Get( CUnitBase const & inst ) { return inst.m_fEyePitch.Get(); }

    static void m_fEyePitch_Set( CUnitBase & inst, float val ) { inst.m_fEyePitch.Set( val ); }

};

void register_CUnitBase_class(){

    { //::CUnitBase
        typedef bp::class_< CUnitBase_wrapper, bp::bases< CBaseCombatCharacter >, boost::noncopyable > CUnitBase_exposer_t;
        CUnitBase_exposer_t CUnitBase_exposer = CUnitBase_exposer_t( "CUnitBase", bp::no_init );
        bp::scope CUnitBase_scope( CUnitBase_exposer );
        CUnitBase_exposer.def( bp::init< >() );
        { //::CUnitBase::AddEntityRelationship
        
            typedef void ( ::CUnitBase::*AddEntityRelationship_function_type )( ::CBaseEntity *,::Disposition_t,int ) ;
            
            CUnitBase_exposer.def( 
                "AddEntityRelationship"
                , AddEntityRelationship_function_type( &::CUnitBase::AddEntityRelationship )
                , ( bp::arg("pEntity"), bp::arg("nDisposition"), bp::arg("nPriority") ) );
        
        }
        { //::CUnitBase::AlwaysSendFullSelectionData
        
            typedef bool ( ::CUnitBase::*AlwaysSendFullSelectionData_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "AlwaysSendFullSelectionData"
                , AlwaysSendFullSelectionData_function_type( &::CUnitBase::AlwaysSendFullSelectionData ) );
        
        }
        { //::CUnitBase::AreAttacksPassable
        
            typedef bool ( ::CUnitBase::*AreAttacksPassable_function_type )( ::CBaseEntity * ) ;
            
            CUnitBase_exposer.def( 
                "AreAttacksPassable"
                , AreAttacksPassable_function_type( &::CUnitBase::AreAttacksPassable )
                , ( bp::arg("pTarget") ) );
        
        }
        { //::CUnitBase::BodyTarget
        
            typedef ::Vector ( ::CUnitBase::*BodyTarget_function_type )( ::Vector const &,bool ) ;
            
            CUnitBase_exposer.def( 
                "BodyTarget"
                , BodyTarget_function_type( &::CUnitBase::BodyTarget )
                , ( bp::arg("posSrc"), bp::arg("bNoisy")=(bool)(true) ) );
        
        }
        { //::CUnitBase::CanBeSeen
        
            typedef bool ( ::CUnitBase::*CanBeSeen_function_type )( ::CUnitBase * ) ;
            
            CUnitBase_exposer.def( 
                "CanBeSeen"
                , CanBeSeen_function_type( &::CUnitBase::CanBeSeen )
                , ( bp::arg("pUnit")=bp::object() ) );
        
        }
        { //::CUnitBase::CanUserControl
        
            typedef bool ( ::CUnitBase::*CanUserControl_function_type )( ::CHL2WarsPlayer * ) ;
            typedef bool ( CUnitBase_wrapper::*default_CanUserControl_function_type )( ::CHL2WarsPlayer * ) ;
            
            CUnitBase_exposer.def( 
                "CanUserControl"
                , CanUserControl_function_type(&::CUnitBase::CanUserControl)
                , default_CanUserControl_function_type(&CUnitBase_wrapper::default_CanUserControl)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CUnitBase::CheckEnemyLost
        
            typedef bool ( ::CUnitBase::*CheckEnemyLost_function_type )( bool ) ;
            
            CUnitBase_exposer.def( 
                "CheckEnemyLost"
                , CheckEnemyLost_function_type( &::CUnitBase::CheckEnemyLost )
                , ( bp::arg("supressevents")=(bool)(false) ) );
        
        }
        { //::CUnitBase::Classify
        
            typedef ::Class_T ( ::CUnitBase::*Classify_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "Classify"
                , Classify_function_type( &::CUnitBase::Classify ) );
        
        }
        { //::CUnitBase::ClientCommand
        
            typedef bool ( ::CUnitBase::*ClientCommand_function_type )( ::CCommand const & ) ;
            typedef bool ( CUnitBase_wrapper::*default_ClientCommand_function_type )( ::CCommand const & ) ;
            
            CUnitBase_exposer.def( 
                "ClientCommand"
                , ClientCommand_function_type(&::CUnitBase::ClientCommand)
                , default_ClientCommand_function_type(&CUnitBase_wrapper::default_ClientCommand)
                , ( bp::arg("args") ) );
        
        }
        { //::CUnitBase::CustomCanBeSeen
        
            typedef bool ( ::CUnitBase::*CustomCanBeSeen_function_type )( ::CUnitBase * ) ;
            typedef bool ( CUnitBase_wrapper::*default_CustomCanBeSeen_function_type )( ::CUnitBase * ) ;
            
            CUnitBase_exposer.def( 
                "CustomCanBeSeen"
                , CustomCanBeSeen_function_type(&::CUnitBase::CustomCanBeSeen)
                , default_CustomCanBeSeen_function_type(&CUnitBase_wrapper::default_CustomCanBeSeen)
                , ( bp::arg("pUnit")=bp::object() ) );
        
        }
        { //::CUnitBase::DispatchBurstFinished
        
            typedef void ( ::CUnitBase::*DispatchBurstFinished_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "DispatchBurstFinished"
                , DispatchBurstFinished_function_type( &::CUnitBase::DispatchBurstFinished ) );
        
        }
        { //::CUnitBase::DispatchEnemyLost
        
            typedef void ( ::CUnitBase::*DispatchEnemyLost_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "DispatchEnemyLost"
                , DispatchEnemyLost_function_type( &::CUnitBase::DispatchEnemyLost ) );
        
        }
        { //::CUnitBase::DispatchOutOfAmmo
        
            typedef void ( ::CUnitBase::*DispatchOutOfAmmo_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "DispatchOutOfAmmo"
                , DispatchOutOfAmmo_function_type( &::CUnitBase::DispatchOutOfAmmo ) );
        
        }
        { //::CUnitBase::DoImpactEffect
        
            typedef void ( ::CUnitBase::*DoImpactEffect_function_type )( ::trace_t &,int ) ;
            typedef void ( CUnitBase_wrapper::*default_DoImpactEffect_function_type )( ::trace_t &,int ) ;
            
            CUnitBase_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type(&::CUnitBase::DoImpactEffect)
                , default_DoImpactEffect_function_type(&CUnitBase_wrapper::default_DoImpactEffect)
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::CUnitBase::DoMuzzleFlash
        
            typedef void ( ::CUnitBase::*DoMuzzleFlash_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "DoMuzzleFlash"
                , DoMuzzleFlash_function_type( &::CUnitBase::DoMuzzleFlash ) );
        
        }
        { //::CUnitBase::EnemyDistance
        
            typedef float ( ::CUnitBase::*EnemyDistance_function_type )( ::CBaseEntity *,bool ) ;
            
            CUnitBase_exposer.def( 
                "EnemyDistance"
                , EnemyDistance_function_type( &::CUnitBase::EnemyDistance )
                , ( bp::arg("pEnemy"), bp::arg("bConsiderSizeUnit")=(bool)(true) ) );
        
        }
        { //::CUnitBase::FInAimCone
        
            typedef bool ( ::CUnitBase::*FInAimCone_function_type )( ::CBaseEntity *,float ) ;
            
            CUnitBase_exposer.def( 
                "FInAimCone"
                , FInAimCone_function_type( &::CUnitBase::FInAimCone )
                , ( bp::arg("pEntity"), bp::arg("fMinDot")=9.94000017642974853515625e-1f ) );
        
        }
        { //::CUnitBase::FInAimCone
        
            typedef bool ( ::CUnitBase::*FInAimCone_function_type )( ::Vector const &,float ) ;
            
            CUnitBase_exposer.def( 
                "FInAimCone"
                , FInAimCone_function_type( &::CUnitBase::FInAimCone )
                , ( bp::arg("vecSpot"), bp::arg("fMinDot")=9.94000017642974853515625e-1f ) );
        
        }
        { //::CUnitBase::FastLOSCheck
        
            typedef bool ( ::CUnitBase::*FastLOSCheck_function_type )( ::Vector const & ) ;
            
            CUnitBase_exposer.def( 
                "FastLOSCheck"
                , FastLOSCheck_function_type( &::CUnitBase::FastLOSCheck )
                , ( bp::arg("vTargetPos") ) );
        
        }
        { //::CUnitBase::FireBullets
        
            typedef void ( ::CUnitBase::*FireBullets_function_type )( ::FireBulletsInfo_t const & ) ;
            
            CUnitBase_exposer.def( 
                "FireBullets"
                , FireBullets_function_type( &::CUnitBase::FireBullets )
                , ( bp::arg("info") ) );
        
        }
        { //::CUnitBase::GetCommander
        
            typedef ::CHL2WarsPlayer * ( ::CUnitBase::*GetCommander_function_type )(  ) const;
            
            CUnitBase_exposer.def( 
                "GetCommander"
                , GetCommander_function_type( &::CUnitBase::GetCommander )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CUnitBase::GetDefaultEyeOffset
        
            typedef ::Vector const & ( ::CUnitBase::*GetDefaultEyeOffset_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "GetDefaultEyeOffset"
                , GetDefaultEyeOffset_function_type( &::CUnitBase::GetDefaultEyeOffset )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CUnitBase::GetDensityMultiplier
        
            typedef float ( ::CUnitBase::*GetDensityMultiplier_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "GetDensityMultiplier"
                , GetDensityMultiplier_function_type( &::CUnitBase::GetDensityMultiplier ) );
        
        }
        { //::CUnitBase::GetEnterOffset
        
            typedef ::Vector const & ( ::CUnitBase::*GetEnterOffset_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "GetEnterOffset"
                , GetEnterOffset_function_type( &::CUnitBase::GetEnterOffset )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CUnitBase::GetIMouse
        
            typedef ::IMouse * ( ::CUnitBase::*GetIMouse_function_type )(  ) ;
            typedef ::IMouse * ( CUnitBase_wrapper::*default_GetIMouse_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "GetIMouse"
                , GetIMouse_function_type(&::CUnitBase::GetIMouse)
                , default_GetIMouse_function_type(&CUnitBase_wrapper::default_GetIMouse)
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CUnitBase::GetNext
        
            typedef ::CUnitBase * ( ::CUnitBase::*GetNext_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "GetNext"
                , GetNext_function_type( &::CUnitBase::GetNext )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CUnitBase::GetSelectedByPlayers
        
            typedef ::CUtlVector< CHandle< CHL2WarsPlayer >, CUtlMemory< CHandle< CHL2WarsPlayer >, int > > const & ( ::CUnitBase::*GetSelectedByPlayers_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "GetSelectedByPlayers"
                , GetSelectedByPlayers_function_type( &::CUnitBase::GetSelectedByPlayers )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CUnitBase::GetSendTable
        
            typedef ::SendTable * ( *GetSendTable_function_type )(  );
            
            CUnitBase_exposer.def( 
                "GetSendTable"
                , GetSendTable_function_type( &::CUnitBase::GetSendTable )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CUnitBase::GetShootEnemyDir
        
            typedef ::Vector ( ::CUnitBase::*GetShootEnemyDir_function_type )( ::Vector &,bool ) ;
            
            CUnitBase_exposer.def( 
                "GetShootEnemyDir"
                , GetShootEnemyDir_function_type( &::CUnitBase::GetShootEnemyDir )
                , ( bp::arg("shootOrigin"), bp::arg("noisy")=(bool)(true) ) );
        
        }
        { //::CUnitBase::GetSquad
        
            typedef ::CBaseEntity * ( ::CUnitBase::*GetSquad_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "GetSquad"
                , GetSquad_function_type( &::CUnitBase::GetSquad )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CUnitBase::GetTracerType
        
            typedef char const * ( ::CUnitBase::*GetTracerType_function_type )(  ) ;
            typedef char const * ( CUnitBase_wrapper::*default_GetTracerType_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type(&::CUnitBase::GetTracerType)
                , default_GetTracerType_function_type(&CUnitBase_wrapper::default_GetTracerType) );
        
        }
        { //::CUnitBase::GetUnitType
        
            typedef char const * ( ::CUnitBase::*GetUnitType_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "GetUnitType"
                , GetUnitType_function_type( &::CUnitBase::GetUnitType ) );
        
        }
        { //::CUnitBase::HandleAnimEvent
        
            typedef void ( ::CUnitBase::*HandleAnimEvent_function_type )( ::animevent_t * ) ;
            
            CUnitBase_exposer.def( 
                "HandleAnimEvent"
                , HandleAnimEvent_function_type( &::CUnitBase::HandleAnimEvent )
                , ( bp::arg("pEvent") ) );
        
        }
        { //::CUnitBase::HasEnterOffset
        
            typedef bool ( ::CUnitBase::*HasEnterOffset_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "HasEnterOffset"
                , HasEnterOffset_function_type( &::CUnitBase::HasEnterOffset ) );
        
        }
        { //::CUnitBase::HasOverridenEntityRelationship
        
            typedef bool ( ::CUnitBase::*HasOverridenEntityRelationship_function_type )( ::CBaseEntity * ) ;
            
            CUnitBase_exposer.def( 
                "HasOverridenEntityRelationship"
                , HasOverridenEntityRelationship_function_type( &::CUnitBase::HasOverridenEntityRelationship )
                , ( bp::arg("pEntity") ) );
        
        }
        { //::CUnitBase::HasRangeAttackLOS
        
            typedef bool ( ::CUnitBase::*HasRangeAttackLOS_function_type )( ::Vector const &,::CBaseEntity * ) ;
            
            CUnitBase_exposer.def( 
                "HasRangeAttackLOS"
                , HasRangeAttackLOS_function_type( &::CUnitBase::HasRangeAttackLOS )
                , ( bp::arg("vTargetPos"), bp::arg("pTarget")=bp::object() ) );
        
        }
        { //::CUnitBase::HasRangeAttackLOSTarget
        
            typedef bool ( ::CUnitBase::*HasRangeAttackLOSTarget_function_type )( ::CBaseEntity * ) ;
            
            CUnitBase_exposer.def( 
                "HasRangeAttackLOSTarget"
                , HasRangeAttackLOSTarget_function_type( &::CUnitBase::HasRangeAttackLOSTarget )
                , ( bp::arg("pTarget") ) );
        
        }
        { //::CUnitBase::IRelationPriority
        
            typedef int ( ::CUnitBase::*IRelationPriority_function_type )( ::CBaseEntity * ) ;
            
            CUnitBase_exposer.def( 
                "IRelationPriority"
                , IRelationPriority_function_type( &::CUnitBase::IRelationPriority )
                , ( bp::arg("pTarget") ) );
        
        }
        { //::CUnitBase::IRelationType
        
            typedef ::Disposition_t ( ::CUnitBase::*IRelationType_function_type )( ::CBaseEntity * ) ;
            
            CUnitBase_exposer.def( 
                "IRelationType"
                , IRelationType_function_type( &::CUnitBase::IRelationType )
                , ( bp::arg("pTarget") ) );
        
        }
        { //::CUnitBase::IsClimbing
        
            typedef bool ( ::CUnitBase::*IsClimbing_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "IsClimbing"
                , IsClimbing_function_type( &::CUnitBase::IsClimbing ) );
        
        }
        { //::CUnitBase::IsCrouching
        
            typedef bool ( ::CUnitBase::*IsCrouching_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "IsCrouching"
                , IsCrouching_function_type( &::CUnitBase::IsCrouching ) );
        
        }
        { //::CUnitBase::IsSelectableByPlayer
        
            typedef bool ( ::CUnitBase::*IsSelectableByPlayer_function_type )( ::CHL2WarsPlayer *,::boost::python::api::object ) ;
            typedef bool ( CUnitBase_wrapper::*default_IsSelectableByPlayer_function_type )( ::CHL2WarsPlayer *,::boost::python::api::object ) ;
            
            CUnitBase_exposer.def( 
                "IsSelectableByPlayer"
                , IsSelectableByPlayer_function_type(&::CUnitBase::IsSelectableByPlayer)
                , default_IsSelectableByPlayer_function_type(&CUnitBase_wrapper::default_IsSelectableByPlayer)
                , ( bp::arg("pPlayer"), bp::arg("target_selection")=boost::python::api::object() ) );
        
        }
        { //::CUnitBase::IsSelectedByPlayer
        
            typedef bool ( ::CUnitBase::*IsSelectedByPlayer_function_type )( int ) ;
            
            CUnitBase_exposer.def( 
                "IsSelectedByPlayer"
                , IsSelectedByPlayer_function_type( &::CUnitBase::IsSelectedByPlayer )
                , ( bp::arg("entindex") ) );
        
        }
        { //::CUnitBase::IsUnit
        
            typedef bool ( ::CUnitBase::*IsUnit_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "IsUnit"
                , IsUnit_function_type( &::CUnitBase::IsUnit ) );
        
        }
        { //::CUnitBase::KeyValue
        
            typedef bool ( ::CUnitBase::*KeyValue_function_type )( char const *,char const * ) ;
            typedef bool ( CUnitBase_wrapper::*default_KeyValue_function_type )( char const *,char const * ) ;
            
            CUnitBase_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CUnitBase::KeyValue)
                , default_KeyValue_function_type(&CUnitBase_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::CUnitBase::MakeTracer
        
            typedef void ( ::CUnitBase::*MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            typedef void ( CUnitBase_wrapper::*default_MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            
            CUnitBase_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type(&::CUnitBase::MakeTracer)
                , default_MakeTracer_function_type(&CUnitBase_wrapper::default_MakeTracer)
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::CUnitBase::OnButtonsChanged
        
            typedef void ( ::CUnitBase::*OnButtonsChanged_function_type )( int,int ) ;
            typedef void ( CUnitBase_wrapper::*default_OnButtonsChanged_function_type )( int,int ) ;
            
            CUnitBase_exposer.def( 
                "OnButtonsChanged"
                , OnButtonsChanged_function_type(&::CUnitBase::OnButtonsChanged)
                , default_OnButtonsChanged_function_type(&CUnitBase_wrapper::default_OnButtonsChanged)
                , ( bp::arg("buttonsMask"), bp::arg("buttonsChanged") ) );
        
        }
        { //::CUnitBase::OnClickLeftDoublePressed
        
            typedef void ( ::CUnitBase::*OnClickLeftDoublePressed_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CUnitBase_wrapper::*default_OnClickLeftDoublePressed_function_type )( ::CHL2WarsPlayer * ) ;
            
            CUnitBase_exposer.def( 
                "OnClickLeftDoublePressed"
                , OnClickLeftDoublePressed_function_type(&::CUnitBase::OnClickLeftDoublePressed)
                , default_OnClickLeftDoublePressed_function_type(&CUnitBase_wrapper::default_OnClickLeftDoublePressed)
                , ( bp::arg("player") ) );
        
        }
        { //::CUnitBase::OnClickLeftPressed
        
            typedef void ( ::CUnitBase::*OnClickLeftPressed_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CUnitBase_wrapper::*default_OnClickLeftPressed_function_type )( ::CHL2WarsPlayer * ) ;
            
            CUnitBase_exposer.def( 
                "OnClickLeftPressed"
                , OnClickLeftPressed_function_type(&::CUnitBase::OnClickLeftPressed)
                , default_OnClickLeftPressed_function_type(&CUnitBase_wrapper::default_OnClickLeftPressed)
                , ( bp::arg("player") ) );
        
        }
        { //::CUnitBase::OnClickLeftReleased
        
            typedef void ( ::CUnitBase::*OnClickLeftReleased_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CUnitBase_wrapper::*default_OnClickLeftReleased_function_type )( ::CHL2WarsPlayer * ) ;
            
            CUnitBase_exposer.def( 
                "OnClickLeftReleased"
                , OnClickLeftReleased_function_type(&::CUnitBase::OnClickLeftReleased)
                , default_OnClickLeftReleased_function_type(&CUnitBase_wrapper::default_OnClickLeftReleased)
                , ( bp::arg("player") ) );
        
        }
        { //::CUnitBase::OnClickRightDoublePressed
        
            typedef void ( ::CUnitBase::*OnClickRightDoublePressed_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CUnitBase_wrapper::*default_OnClickRightDoublePressed_function_type )( ::CHL2WarsPlayer * ) ;
            
            CUnitBase_exposer.def( 
                "OnClickRightDoublePressed"
                , OnClickRightDoublePressed_function_type(&::CUnitBase::OnClickRightDoublePressed)
                , default_OnClickRightDoublePressed_function_type(&CUnitBase_wrapper::default_OnClickRightDoublePressed)
                , ( bp::arg("player") ) );
        
        }
        { //::CUnitBase::OnClickRightPressed
        
            typedef void ( ::CUnitBase::*OnClickRightPressed_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CUnitBase_wrapper::*default_OnClickRightPressed_function_type )( ::CHL2WarsPlayer * ) ;
            
            CUnitBase_exposer.def( 
                "OnClickRightPressed"
                , OnClickRightPressed_function_type(&::CUnitBase::OnClickRightPressed)
                , default_OnClickRightPressed_function_type(&CUnitBase_wrapper::default_OnClickRightPressed)
                , ( bp::arg("player") ) );
        
        }
        { //::CUnitBase::OnClickRightReleased
        
            typedef void ( ::CUnitBase::*OnClickRightReleased_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CUnitBase_wrapper::*default_OnClickRightReleased_function_type )( ::CHL2WarsPlayer * ) ;
            
            CUnitBase_exposer.def( 
                "OnClickRightReleased"
                , OnClickRightReleased_function_type(&::CUnitBase::OnClickRightReleased)
                , default_OnClickRightReleased_function_type(&CUnitBase_wrapper::default_OnClickRightReleased)
                , ( bp::arg("player") ) );
        
        }
        { //::CUnitBase::OnCursorEntered
        
            typedef void ( ::CUnitBase::*OnCursorEntered_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CUnitBase_wrapper::*default_OnCursorEntered_function_type )( ::CHL2WarsPlayer * ) ;
            
            CUnitBase_exposer.def( 
                "OnCursorEntered"
                , OnCursorEntered_function_type(&::CUnitBase::OnCursorEntered)
                , default_OnCursorEntered_function_type(&CUnitBase_wrapper::default_OnCursorEntered)
                , ( bp::arg("player") ) );
        
        }
        { //::CUnitBase::OnCursorExited
        
            typedef void ( ::CUnitBase::*OnCursorExited_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CUnitBase_wrapper::*default_OnCursorExited_function_type )( ::CHL2WarsPlayer * ) ;
            
            CUnitBase_exposer.def( 
                "OnCursorExited"
                , OnCursorExited_function_type(&::CUnitBase::OnCursorExited)
                , default_OnCursorExited_function_type(&CUnitBase_wrapper::default_OnCursorExited)
                , ( bp::arg("player") ) );
        
        }
        { //::CUnitBase::OnDeSelected
        
            typedef void ( ::CUnitBase::*OnDeSelected_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CUnitBase_wrapper::*default_OnDeSelected_function_type )( ::CHL2WarsPlayer * ) ;
            
            CUnitBase_exposer.def( 
                "OnDeSelected"
                , OnDeSelected_function_type(&::CUnitBase::OnDeSelected)
                , default_OnDeSelected_function_type(&CUnitBase_wrapper::default_OnDeSelected)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CUnitBase::OnFullHealth
        
            typedef void ( ::CUnitBase::*OnFullHealth_function_type )(  ) ;
            typedef void ( CUnitBase_wrapper::*default_OnFullHealth_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "OnFullHealth"
                , OnFullHealth_function_type(&::CUnitBase::OnFullHealth)
                , default_OnFullHealth_function_type(&CUnitBase_wrapper::default_OnFullHealth) );
        
        }
        { //::CUnitBase::OnLostFullHealth
        
            typedef void ( ::CUnitBase::*OnLostFullHealth_function_type )(  ) ;
            typedef void ( CUnitBase_wrapper::*default_OnLostFullHealth_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "OnLostFullHealth"
                , OnLostFullHealth_function_type(&::CUnitBase::OnLostFullHealth)
                , default_OnLostFullHealth_function_type(&CUnitBase_wrapper::default_OnLostFullHealth) );
        
        }
        { //::CUnitBase::OnRestore
        
            typedef void ( ::CUnitBase::*OnRestore_function_type )(  ) ;
            typedef void ( CUnitBase_wrapper::*default_OnRestore_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "OnRestore"
                , OnRestore_function_type(&::CUnitBase::OnRestore)
                , default_OnRestore_function_type(&CUnitBase_wrapper::default_OnRestore) );
        
        }
        { //::CUnitBase::OnSelected
        
            typedef void ( ::CUnitBase::*OnSelected_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CUnitBase_wrapper::*default_OnSelected_function_type )( ::CHL2WarsPlayer * ) ;
            
            CUnitBase_exposer.def( 
                "OnSelected"
                , OnSelected_function_type(&::CUnitBase::OnSelected)
                , default_OnSelected_function_type(&CUnitBase_wrapper::default_OnSelected)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CUnitBase::OnTakeDamage
        
            typedef int ( ::CUnitBase::*OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            typedef int ( CUnitBase_wrapper::*default_OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            
            CUnitBase_exposer.def( 
                "OnTakeDamage"
                , OnTakeDamage_function_type(&::CUnitBase::OnTakeDamage)
                , default_OnTakeDamage_function_type(&CUnitBase_wrapper::default_OnTakeDamage)
                , ( bp::arg("info") ) );
        
        }
        { //::CUnitBase::OnTakeDamage_Alive
        
            typedef int ( ::CUnitBase::*OnTakeDamage_Alive_function_type )( ::CTakeDamageInfo const & ) ;
            typedef int ( CUnitBase_wrapper::*default_OnTakeDamage_Alive_function_type )( ::CTakeDamageInfo const & ) ;
            
            CUnitBase_exposer.def( 
                "OnTakeDamage_Alive"
                , OnTakeDamage_Alive_function_type(&::CUnitBase::OnTakeDamage_Alive)
                , default_OnTakeDamage_Alive_function_type(&CUnitBase_wrapper::default_OnTakeDamage_Alive)
                , ( bp::arg("info") ) );
        
        }
        { //::CUnitBase::OnUnitTypeChanged
        
            typedef void ( ::CUnitBase::*OnUnitTypeChanged_function_type )( char const * ) ;
            typedef void ( CUnitBase_wrapper::*default_OnUnitTypeChanged_function_type )( char const * ) ;
            
            CUnitBase_exposer.def( 
                "OnUnitTypeChanged"
                , OnUnitTypeChanged_function_type(&::CUnitBase::OnUnitTypeChanged)
                , default_OnUnitTypeChanged_function_type(&CUnitBase_wrapper::default_OnUnitTypeChanged)
                , ( bp::arg("old_unit_type") ) );
        
        }
        { //::CUnitBase::OnUserControl
        
            typedef void ( ::CUnitBase::*OnUserControl_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CUnitBase_wrapper::*default_OnUserControl_function_type )( ::CHL2WarsPlayer * ) ;
            
            CUnitBase_exposer.def( 
                "OnUserControl"
                , OnUserControl_function_type(&::CUnitBase::OnUserControl)
                , default_OnUserControl_function_type(&CUnitBase_wrapper::default_OnUserControl)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CUnitBase::OnUserLeftControl
        
            typedef void ( ::CUnitBase::*OnUserLeftControl_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CUnitBase_wrapper::*default_OnUserLeftControl_function_type )( ::CHL2WarsPlayer * ) ;
            
            CUnitBase_exposer.def( 
                "OnUserLeftControl"
                , OnUserLeftControl_function_type(&::CUnitBase::OnUserLeftControl)
                , default_OnUserLeftControl_function_type(&CUnitBase_wrapper::default_OnUserLeftControl)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CUnitBase::Order
        
            typedef void ( ::CUnitBase::*Order_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CUnitBase_wrapper::*default_Order_function_type )( ::CHL2WarsPlayer * ) ;
            
            CUnitBase_exposer.def( 
                "Order"
                , Order_function_type(&::CUnitBase::Order)
                , default_Order_function_type(&CUnitBase_wrapper::default_Order)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CUnitBase::PassesDamageFilter
        
            typedef bool ( ::CUnitBase::*PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CUnitBase_wrapper::*default_PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            
            CUnitBase_exposer.def( 
                "PassesDamageFilter"
                , PassesDamageFilter_function_type(&::CUnitBase::PassesDamageFilter)
                , default_PassesDamageFilter_function_type(&CUnitBase_wrapper::default_PassesDamageFilter)
                , ( bp::arg("info") ) );
        
        }
        { //::CUnitBase::PhysicsSimulate
        
            typedef void ( ::CUnitBase::*PhysicsSimulate_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "PhysicsSimulate"
                , PhysicsSimulate_function_type( &::CUnitBase::PhysicsSimulate ) );
        
        }
        { //::CUnitBase::PhysicsSolidMaskForEntity
        
            typedef unsigned int ( ::CUnitBase::*PhysicsSolidMaskForEntity_function_type )(  ) const;
            
            CUnitBase_exposer.def( 
                "PhysicsSolidMaskForEntity"
                , PhysicsSolidMaskForEntity_function_type( &::CUnitBase::PhysicsSolidMaskForEntity ) );
        
        }
        { //::CUnitBase::RemoveEntityRelationship
        
            typedef bool ( ::CUnitBase::*RemoveEntityRelationship_function_type )( ::CBaseEntity * ) ;
            
            CUnitBase_exposer.def( 
                "RemoveEntityRelationship"
                , RemoveEntityRelationship_function_type( &::CUnitBase::RemoveEntityRelationship )
                , ( bp::arg("pEntity") ) );
        
        }
        { //::CUnitBase::Restore
        
            typedef int ( ::CUnitBase::*Restore_function_type )( ::IRestore & ) ;
            typedef int ( CUnitBase_wrapper::*default_Restore_function_type )( ::IRestore & ) ;
            
            CUnitBase_exposer.def( 
                "Restore"
                , Restore_function_type(&::CUnitBase::Restore)
                , default_Restore_function_type(&CUnitBase_wrapper::default_Restore)
                , ( bp::arg("restore") ) );
        
        }
        { //::CUnitBase::Select
        
            typedef void ( ::CUnitBase::*Select_function_type )( ::CHL2WarsPlayer *,bool ) ;
            typedef void ( CUnitBase_wrapper::*default_Select_function_type )( ::CHL2WarsPlayer *,bool ) ;
            
            CUnitBase_exposer.def( 
                "Select"
                , Select_function_type(&::CUnitBase::Select)
                , default_Select_function_type(&CUnitBase_wrapper::default_Select)
                , ( bp::arg("pPlayer"), bp::arg("bTriggerOnSel")=(bool)(true) ) );
        
        }
        { //::CUnitBase::SetAlwaysSendFullSelectionData
        
            typedef void ( ::CUnitBase::*SetAlwaysSendFullSelectionData_function_type )( bool ) ;
            
            CUnitBase_exposer.def( 
                "SetAlwaysSendFullSelectionData"
                , SetAlwaysSendFullSelectionData_function_type( &::CUnitBase::SetAlwaysSendFullSelectionData )
                , ( bp::arg("state") ) );
        
        }
        { //::CUnitBase::SetAnimEventMap
        
            typedef void ( ::CUnitBase::*SetAnimEventMap_function_type )( ::boost::python::api::object ) ;
            
            CUnitBase_exposer.def( 
                "SetAnimEventMap"
                , SetAnimEventMap_function_type( &::CUnitBase::SetAnimEventMap )
                , ( bp::arg("animeventmap") ) );
        
        }
        { //::CUnitBase::SetCanBeSeen
        
            typedef void ( ::CUnitBase::*SetCanBeSeen_function_type )( bool ) ;
            
            CUnitBase_exposer.def( 
                "SetCanBeSeen"
                , SetCanBeSeen_function_type( &::CUnitBase::SetCanBeSeen )
                , ( bp::arg("canbeseen") ) );
        
        }
        { //::CUnitBase::SetCommander
        
            typedef void ( ::CUnitBase::*SetCommander_function_type )( ::CHL2WarsPlayer * ) ;
            
            CUnitBase_exposer.def( 
                "SetCommander"
                , SetCommander_function_type( &::CUnitBase::SetCommander )
                , ( bp::arg("player") ) );
        
        }
        { //::CUnitBase::SetDefaultEyeOffset
        
            typedef void ( ::CUnitBase::*SetDefaultEyeOffset_function_type )( ::Vector * ) ;
            
            CUnitBase_exposer.def( 
                "SetDefaultEyeOffset"
                , SetDefaultEyeOffset_function_type( &::CUnitBase::SetDefaultEyeOffset )
                , ( bp::arg("pCustomOfset")=bp::object() ) );
        
        }
        { //::CUnitBase::SetEnemyEx
        
            typedef void ( ::CUnitBase::*SetEnemyEx_function_type )( ::CBaseEntity *,bool ) ;
            
            CUnitBase_exposer.def( 
                "SetEnemyEx"
                , SetEnemyEx_function_type( &::CUnitBase::SetEnemyEx )
                , ( bp::arg("pEnt"), bp::arg("supressevents")=(bool)(false) ) );
        
        }
        { //::CUnitBase::SetEnterOffset
        
            typedef void ( ::CUnitBase::*SetEnterOffset_function_type )( ::Vector const & ) ;
            
            CUnitBase_exposer.def( 
                "SetEnterOffset"
                , SetEnterOffset_function_type( &::CUnitBase::SetEnterOffset )
                , ( bp::arg("enteroffset") ) );
        
        }
        { //::CUnitBase::SetSquad
        
            typedef void ( ::CUnitBase::*SetSquad_function_type )( ::CBaseEntity * ) ;
            
            CUnitBase_exposer.def( 
                "SetSquad"
                , SetSquad_function_type( &::CUnitBase::SetSquad )
                , ( bp::arg("pUnit") ) );
        
        }
        { //::CUnitBase::SetUnitType
        
            typedef void ( ::CUnitBase::*SetUnitType_function_type )( char const * ) ;
            
            CUnitBase_exposer.def( 
                "SetUnitType"
                , SetUnitType_function_type( &::CUnitBase::SetUnitType )
                , ( bp::arg("unit_type") ) );
        
        }
        { //::CUnitBase::SetUseCustomCanBeSeenCheck
        
            typedef void ( ::CUnitBase::*SetUseCustomCanBeSeenCheck_function_type )( bool ) ;
            
            CUnitBase_exposer.def( 
                "SetUseCustomCanBeSeenCheck"
                , SetUseCustomCanBeSeenCheck_function_type( &::CUnitBase::SetUseCustomCanBeSeenCheck )
                , ( bp::arg("bUseCustomCanBeSeen") ) );
        
        }
        { //::CUnitBase::SetUseMinimalSendTable
        
            typedef void ( ::CUnitBase::*SetUseMinimalSendTable_function_type )( int,bool ) ;
            
            CUnitBase_exposer.def( 
                "SetUseMinimalSendTable"
                , SetUseMinimalSendTable_function_type( &::CUnitBase::SetUseMinimalSendTable )
                , ( bp::arg("iClientIndex"), bp::arg("state") ) );
        
        }
        { //::CUnitBase::SetupBones
        
            typedef void ( ::CUnitBase::*SetupBones_function_type )( ::matrix3x4a_t *,int ) ;
            
            CUnitBase_exposer.def( 
                "SetupBones"
                , SetupBones_function_type( &::CUnitBase::SetupBones )
                , ( bp::arg("pBoneToWorld"), bp::arg("boneMask") ) );
        
        }
        { //::CUnitBase::Spawn
        
            typedef void ( ::CUnitBase::*Spawn_function_type )(  ) ;
            typedef void ( CUnitBase_wrapper::*default_Spawn_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "Spawn"
                , Spawn_function_type(&::CUnitBase::Spawn)
                , default_Spawn_function_type(&CUnitBase_wrapper::default_Spawn) );
        
        }
        { //::CUnitBase::TakeHealth
        
            typedef int ( ::CUnitBase::*TakeHealth_function_type )( float,int ) ;
            
            CUnitBase_exposer.def( 
                "TakeHealth"
                , TakeHealth_function_type( &::CUnitBase::TakeHealth )
                , ( bp::arg("flHealth"), bp::arg("bitsDamageType") ) );
        
        }
        { //::CUnitBase::TargetDistance
        
            typedef float ( ::CUnitBase::*TargetDistance_function_type )( ::Vector const &,::CBaseEntity *,bool ) ;
            
            CUnitBase_exposer.def( 
                "TargetDistance"
                , TargetDistance_function_type( &::CUnitBase::TargetDistance )
                , ( bp::arg("pos"), bp::arg("pTarget"), bp::arg("bConsiderSizeUnit")=(bool)(true) ) );
        
        }
        { //::CUnitBase::TraceAttack
        
            typedef void ( ::CUnitBase::*TraceAttack_function_type )( ::CTakeDamageInfo const &,::Vector const &,::trace_t * ) ;
            
            CUnitBase_exposer.def( 
                "TraceAttack"
                , TraceAttack_function_type( &::CUnitBase::TraceAttack )
                , ( bp::arg("info"), bp::arg("vecDir"), bp::arg("ptr") ) );
        
        }
        { //::CUnitBase::UpdateEnemy
        
            typedef void ( ::CUnitBase::*UpdateEnemy_function_type )( ::UnitBaseSense & ) ;
            
            CUnitBase_exposer.def( 
                "UpdateEnemy"
                , UpdateEnemy_function_type( &::CUnitBase::UpdateEnemy )
                , ( bp::arg("senses") ) );
        
        }
        { //::CUnitBase::UpdateOnRemove
        
            typedef void ( ::CUnitBase::*UpdateOnRemove_function_type )(  ) ;
            typedef void ( CUnitBase_wrapper::*default_UpdateOnRemove_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type(&::CUnitBase::UpdateOnRemove)
                , default_UpdateOnRemove_function_type(&CUnitBase_wrapper::default_UpdateOnRemove) );
        
        }
        { //::CUnitBase::UpdateServerAnimation
        
            typedef void ( ::CUnitBase::*UpdateServerAnimation_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "UpdateServerAnimation"
                , UpdateServerAnimation_function_type( &::CUnitBase::UpdateServerAnimation ) );
        
        }
        { //::CUnitBase::UpdateTransmitState
        
            typedef int ( ::CUnitBase::*UpdateTransmitState_function_type )(  ) ;
            typedef int ( CUnitBase_wrapper::*default_UpdateTransmitState_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "UpdateTransmitState"
                , UpdateTransmitState_function_type(&::CUnitBase::UpdateTransmitState)
                , default_UpdateTransmitState_function_type(&CUnitBase_wrapper::default_UpdateTransmitState) );
        
        }
        { //::CUnitBase::UseCustomCanBeSeenCheck
        
            typedef bool ( ::CUnitBase::*UseCustomCanBeSeenCheck_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "UseCustomCanBeSeenCheck"
                , UseCustomCanBeSeenCheck_function_type( &::CUnitBase::UseCustomCanBeSeenCheck ) );
        
        }
        { //::CUnitBase::UseMinimalSendTable
        
            typedef bool ( ::CUnitBase::*UseMinimalSendTable_function_type )( int ) ;
            
            CUnitBase_exposer.def( 
                "UseMinimalSendTable"
                , UseMinimalSendTable_function_type( &::CUnitBase::UseMinimalSendTable )
                , ( bp::arg("iClientIndex") ) );
        
        }
        { //::CUnitBase::UserCmd
        
            typedef void ( ::CUnitBase::*UserCmd_function_type )( ::CUserCmd * ) ;
            typedef void ( CUnitBase_wrapper::*default_UserCmd_function_type )( ::CUserCmd * ) ;
            
            CUnitBase_exposer.def( 
                "UserCmd"
                , UserCmd_function_type(&::CUnitBase::UserCmd)
                , default_UserCmd_function_type(&CUnitBase_wrapper::default_UserCmd)
                , ( bp::arg("pCmd") ) );
        
        }
        { //::CUnitBase::Weapon_Equip
        
            typedef void ( ::CUnitBase::*Weapon_Equip_function_type )( ::CBaseCombatWeapon * ) ;
            typedef void ( CUnitBase_wrapper::*default_Weapon_Equip_function_type )( ::CBaseCombatWeapon * ) ;
            
            CUnitBase_exposer.def( 
                "Weapon_Equip"
                , Weapon_Equip_function_type(&::CUnitBase::Weapon_Equip)
                , default_Weapon_Equip_function_type(&CUnitBase_wrapper::default_Weapon_Equip)
                , ( bp::arg("pWeapon") ) );
        
        }
        CUnitBase_exposer.def_readwrite( "bodytargetoriginbased", &CUnitBase::m_bBodyTargetOriginBased );
        CUnitBase_exposer.def_readwrite( "fowfilterfriendly", &CUnitBase::m_bFOWFilterFriendly );
        CUnitBase_exposer.def_readwrite( "friendlydamage", &CUnitBase::m_bFriendlyDamage );
        CUnitBase_exposer.def_readwrite( "neverignoreattacks", &CUnitBase::m_bNeverIgnoreAttacks );
        CUnitBase_exposer.def_readwrite( "serverdoimpactandtracer", &CUnitBase::m_bServerDoImpactAndTracer );
        CUnitBase_exposer.def_readwrite( "accuracy", &CUnitBase::m_fAccuracy );
        CUnitBase_exposer.def_readwrite( "deathdrop", &CUnitBase::m_fDeathDrop );
        CUnitBase_exposer.def_readwrite( "enemychangetolerancesqr", &CUnitBase::m_fEnemyChangeToleranceSqr );
        CUnitBase_exposer.def_readwrite( "eyeyaw", &CUnitBase::m_fEyeYaw );
        CUnitBase_exposer.def_readwrite( "maxclimbheight", &CUnitBase::m_fMaxClimbHeight );
        CUnitBase_exposer.def_readwrite( "minslope", &CUnitBase::m_fMinSlope );
        CUnitBase_exposer.def_readwrite( "modelyawrotation", &CUnitBase::m_fModelYawRotation );
        CUnitBase_exposer.def_readwrite( "savedrop", &CUnitBase::m_fSaveDrop );
        CUnitBase_exposer.def_readwrite( "testroutestartheight", &CUnitBase::m_fTestRouteStartHeight );
        { //::CBaseAnimating::Activate
        
            typedef void ( ::CBaseAnimating::*Activate_function_type )(  ) ;
            typedef void ( CUnitBase_wrapper::*default_Activate_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "Activate"
                , Activate_function_type(&::CBaseAnimating::Activate)
                , default_Activate_function_type(&CUnitBase_wrapper::default_Activate) );
        
        }
        { //::CBaseCombatCharacter::BecomeRagdoll
        
            typedef bool ( ::CBaseCombatCharacter::*BecomeRagdoll_function_type )( ::CTakeDamageInfo const &,::Vector const & ) ;
            typedef bool ( CUnitBase_wrapper::*default_BecomeRagdoll_function_type )( ::CTakeDamageInfo const &,::Vector const & ) ;
            
            CUnitBase_exposer.def( 
                "BecomeRagdoll"
                , BecomeRagdoll_function_type(&::CBaseCombatCharacter::BecomeRagdoll)
                , default_BecomeRagdoll_function_type(&CUnitBase_wrapper::default_BecomeRagdoll)
                , ( bp::arg("info"), bp::arg("forceVector") ) );
        
        }
        { //::CBaseAnimating::CanBecomeRagdoll
        
            typedef bool ( ::CBaseAnimating::*CanBecomeRagdoll_function_type )(  ) ;
            typedef bool ( CUnitBase_wrapper::*default_CanBecomeRagdoll_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "CanBecomeRagdoll"
                , CanBecomeRagdoll_function_type(&::CBaseAnimating::CanBecomeRagdoll)
                , default_CanBecomeRagdoll_function_type(&CUnitBase_wrapper::default_CanBecomeRagdoll) );
        
        }
        { //::CBaseEntity::ComputeWorldSpaceSurroundingBox
        
            typedef void ( ::CBaseEntity::*ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            typedef void ( CUnitBase_wrapper::*default_ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            
            CUnitBase_exposer.def( 
                "ComputeWorldSpaceSurroundingBox"
                , ComputeWorldSpaceSurroundingBox_function_type(&::CBaseEntity::ComputeWorldSpaceSurroundingBox)
                , default_ComputeWorldSpaceSurroundingBox_function_type(&CUnitBase_wrapper::default_ComputeWorldSpaceSurroundingBox)
                , ( bp::arg("pWorldMins"), bp::arg("pWorldMaxs") ) );
        
        }
        { //::CBaseCombatCharacter::CorpseGib
        
            typedef bool ( ::CBaseCombatCharacter::*CorpseGib_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CUnitBase_wrapper::*default_CorpseGib_function_type )( ::CTakeDamageInfo const & ) ;
            
            CUnitBase_exposer.def( 
                "CorpseGib"
                , CorpseGib_function_type(&::CBaseCombatCharacter::CorpseGib)
                , default_CorpseGib_function_type(&CUnitBase_wrapper::default_CorpseGib)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::CreateVPhysics
        
            typedef bool ( ::CBaseEntity::*CreateVPhysics_function_type )(  ) ;
            typedef bool ( CUnitBase_wrapper::*default_CreateVPhysics_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::CBaseEntity::CreateVPhysics)
                , default_CreateVPhysics_function_type(&CUnitBase_wrapper::default_CreateVPhysics) );
        
        }
        { //::CBaseEntity::DeathNotice
        
            typedef void ( ::CBaseEntity::*DeathNotice_function_type )( ::CBaseEntity * ) ;
            typedef void ( CUnitBase_wrapper::*default_DeathNotice_function_type )( ::CBaseEntity * ) ;
            
            CUnitBase_exposer.def( 
                "DeathNotice"
                , DeathNotice_function_type(&::CBaseEntity::DeathNotice)
                , default_DeathNotice_function_type(&CUnitBase_wrapper::default_DeathNotice)
                , ( bp::arg("pVictim") ) );
        
        }
        { //::CBaseEntity::DrawDebugGeometryOverlays
        
            typedef void ( ::CBaseEntity::*DrawDebugGeometryOverlays_function_type )(  ) ;
            typedef void ( CUnitBase_wrapper::*default_DrawDebugGeometryOverlays_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "DrawDebugGeometryOverlays"
                , DrawDebugGeometryOverlays_function_type(&::CBaseEntity::DrawDebugGeometryOverlays)
                , default_DrawDebugGeometryOverlays_function_type(&CUnitBase_wrapper::default_DrawDebugGeometryOverlays) );
        
        }
        { //::CBaseAnimating::DrawDebugTextOverlays
        
            typedef int ( ::CBaseAnimating::*DrawDebugTextOverlays_function_type )(  ) ;
            typedef int ( CUnitBase_wrapper::*default_DrawDebugTextOverlays_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "DrawDebugTextOverlays"
                , DrawDebugTextOverlays_function_type(&::CBaseAnimating::DrawDebugTextOverlays)
                , default_DrawDebugTextOverlays_function_type(&CUnitBase_wrapper::default_DrawDebugTextOverlays) );
        
        }
        { //::CBaseEntity::EndTouch
        
            typedef void ( ::CBaseEntity::*EndTouch_function_type )( ::CBaseEntity * ) ;
            typedef void ( CUnitBase_wrapper::*default_EndTouch_function_type )( ::CBaseEntity * ) ;
            
            CUnitBase_exposer.def( 
                "EndTouch"
                , EndTouch_function_type(&::CBaseEntity::EndTouch)
                , default_EndTouch_function_type(&CUnitBase_wrapper::default_EndTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseCombatCharacter::Event_Gibbed
        
            typedef bool ( ::CBaseCombatCharacter::*Event_Gibbed_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CUnitBase_wrapper::*default_Event_Gibbed_function_type )( ::CTakeDamageInfo const & ) ;
            
            CUnitBase_exposer.def( 
                "Event_Gibbed"
                , Event_Gibbed_function_type(&::CBaseCombatCharacter::Event_Gibbed)
                , default_Event_Gibbed_function_type(&CUnitBase_wrapper::default_Event_Gibbed)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseCombatCharacter::Event_Killed
        
            typedef void ( ::CBaseCombatCharacter::*Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            typedef void ( CUnitBase_wrapper::*default_Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            
            CUnitBase_exposer.def( 
                "Event_Killed"
                , Event_Killed_function_type(&::CBaseCombatCharacter::Event_Killed)
                , default_Event_Killed_function_type(&CUnitBase_wrapper::default_Event_Killed)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::Event_KilledOther
        
            typedef void ( ::CBaseEntity::*Event_KilledOther_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            typedef void ( CUnitBase_wrapper::*default_Event_KilledOther_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            
            CUnitBase_exposer.def( 
                "Event_KilledOther"
                , Event_KilledOther_function_type(&::CBaseEntity::Event_KilledOther)
                , default_Event_KilledOther_function_type(&CUnitBase_wrapper::default_Event_KilledOther)
                , ( bp::arg("pVictim"), bp::arg("info") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,float ) ;
            typedef bool ( CUnitBase_wrapper::*default_KeyValue_function_type )( char const *,float ) ;
            
            CUnitBase_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CUnitBase_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,int ) ;
            typedef bool ( CUnitBase_wrapper::*default_KeyValue_function_type )( char const *,int ) ;
            
            CUnitBase_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CUnitBase_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("nValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,::Vector const & ) ;
            typedef bool ( CUnitBase_wrapper::*default_KeyValue_function_type )( char const *,::Vector const & ) ;
            
            CUnitBase_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CUnitBase_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::CBaseAnimating::ModifyOrAppendCriteria
        
            typedef void ( ::CBaseAnimating::*ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            typedef void ( CUnitBase_wrapper::*default_ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            
            CUnitBase_exposer.def( 
                "ModifyOrAppendCriteria"
                , ModifyOrAppendCriteria_function_type(&::CBaseAnimating::ModifyOrAppendCriteria)
                , default_ModifyOrAppendCriteria_function_type(&CUnitBase_wrapper::default_ModifyOrAppendCriteria)
                , ( bp::arg("set") ) );
        
        }
        { //::CBaseEntity::OnChangeOwnerNumber
        
            typedef void ( ::CBaseEntity::*OnChangeOwnerNumber_function_type )( int ) ;
            typedef void ( CUnitBase_wrapper::*default_OnChangeOwnerNumber_function_type )( int ) ;
            
            CUnitBase_exposer.def( 
                "OnChangeOwnerNumber"
                , OnChangeOwnerNumber_function_type(&::CBaseEntity::OnChangeOwnerNumber)
                , default_OnChangeOwnerNumber_function_type(&CUnitBase_wrapper::default_OnChangeOwnerNumber)
                , ( bp::arg("old_owner_number") ) );
        
        }
        { //::CBaseAnimating::OnSequenceSet
        
            typedef void ( ::CBaseAnimating::*OnSequenceSet_function_type )( int ) ;
            typedef void ( CUnitBase_wrapper::*default_OnSequenceSet_function_type )( int ) ;
            
            CUnitBase_exposer.def( 
                "OnSequenceSet"
                , OnSequenceSet_function_type(&::CBaseAnimating::OnSequenceSet)
                , default_OnSequenceSet_function_type(&CUnitBase_wrapper::default_OnSequenceSet)
                , ( bp::arg("nOldSequence") ) );
        
        }
        { //::CBaseEntity::PostClientActive
        
            typedef void ( ::CBaseEntity::*PostClientActive_function_type )(  ) ;
            typedef void ( CUnitBase_wrapper::*default_PostClientActive_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "PostClientActive"
                , PostClientActive_function_type(&::CBaseEntity::PostClientActive)
                , default_PostClientActive_function_type(&CUnitBase_wrapper::default_PostClientActive) );
        
        }
        { //::CBaseEntity::PostConstructor
        
            typedef void ( ::CBaseEntity::*PostConstructor_function_type )( char const * ) ;
            typedef void ( CUnitBase_wrapper::*default_PostConstructor_function_type )( char const * ) ;
            
            CUnitBase_exposer.def( 
                "PostConstructor"
                , PostConstructor_function_type(&::CBaseEntity::PostConstructor)
                , default_PostConstructor_function_type(&CUnitBase_wrapper::default_PostConstructor)
                , ( bp::arg("szClassname") ) );
        
        }
        { //::CBaseCombatCharacter::Precache
        
            typedef void ( ::CBaseCombatCharacter::*Precache_function_type )(  ) ;
            typedef void ( CUnitBase_wrapper::*default_Precache_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "Precache"
                , Precache_function_type(&::CBaseCombatCharacter::Precache)
                , default_Precache_function_type(&CUnitBase_wrapper::default_Precache) );
        
        }
        { //::CBaseAnimating::PyOnNewModel
        
            typedef void ( CUnitBase_wrapper::*OnNewModel_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "OnNewModel"
                , OnNewModel_function_type( &CUnitBase_wrapper::default_OnNewModel ) );
        
        }
        { //::CBaseAnimating::PyPostOnNewModel
        
            typedef void ( CUnitBase_wrapper::*PostOnNewModel_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "PostOnNewModel"
                , PostOnNewModel_function_type( &CUnitBase_wrapper::default_PostOnNewModel ) );
        
        }
        { //::CBaseCombatCharacter::ShouldGib
        
            typedef bool ( ::CBaseCombatCharacter::*ShouldGib_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CUnitBase_wrapper::*default_ShouldGib_function_type )( ::CTakeDamageInfo const & ) ;
            
            CUnitBase_exposer.def( 
                "ShouldGib"
                , ShouldGib_function_type(&::CBaseCombatCharacter::ShouldGib)
                , default_ShouldGib_function_type(&CUnitBase_wrapper::default_ShouldGib)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::StartTouch
        
            typedef void ( ::CBaseEntity::*StartTouch_function_type )( ::CBaseEntity * ) ;
            typedef void ( CUnitBase_wrapper::*default_StartTouch_function_type )( ::CBaseEntity * ) ;
            
            CUnitBase_exposer.def( 
                "StartTouch"
                , StartTouch_function_type(&::CBaseEntity::StartTouch)
                , default_StartTouch_function_type(&CUnitBase_wrapper::default_StartTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::StopLoopingSounds
        
            typedef void ( ::CBaseEntity::*StopLoopingSounds_function_type )(  ) ;
            typedef void ( CUnitBase_wrapper::*default_StopLoopingSounds_function_type )(  ) ;
            
            CUnitBase_exposer.def( 
                "StopLoopingSounds"
                , StopLoopingSounds_function_type(&::CBaseEntity::StopLoopingSounds)
                , default_StopLoopingSounds_function_type(&CUnitBase_wrapper::default_StopLoopingSounds) );
        
        }
        { //::CBaseEntity::VPhysicsCollision
        
            typedef void ( ::CBaseEntity::*VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            typedef void ( CUnitBase_wrapper::*default_VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            
            CUnitBase_exposer.def( 
                "VPhysicsCollision"
                , VPhysicsCollision_function_type(&::CBaseEntity::VPhysicsCollision)
                , default_VPhysicsCollision_function_type(&CUnitBase_wrapper::default_VPhysicsCollision)
                , ( bp::arg("index"), bp::arg("pEvent") ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_Drop
        
            typedef void ( ::CBaseCombatCharacter::*Weapon_Drop_function_type )( ::CBaseCombatWeapon *,::Vector const *,::Vector const * ) ;
            typedef void ( CUnitBase_wrapper::*default_Weapon_Drop_function_type )( ::CBaseCombatWeapon *,::Vector const *,::Vector const * ) ;
            
            CUnitBase_exposer.def( 
                "Weapon_Drop"
                , Weapon_Drop_function_type(&::CBaseCombatCharacter::Weapon_Drop)
                , default_Weapon_Drop_function_type(&CUnitBase_wrapper::default_Weapon_Drop)
                , ( bp::arg("pWeapon"), bp::arg("pvecTarget")=bp::object(), bp::arg("pVelocity")=bp::object() ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_Switch
        
            typedef bool ( ::CBaseCombatCharacter::*Weapon_Switch_function_type )( ::CBaseCombatWeapon *,int ) ;
            typedef bool ( CUnitBase_wrapper::*default_Weapon_Switch_function_type )( ::CBaseCombatWeapon *,int ) ;
            
            CUnitBase_exposer.def( 
                "Weapon_Switch"
                , Weapon_Switch_function_type(&::CBaseCombatCharacter::Weapon_Switch)
                , default_Weapon_Switch_function_type(&CUnitBase_wrapper::default_Weapon_Switch)
                , ( bp::arg("pWeapon"), bp::arg("viewmodelindex")=(int)(0) ) );
        
        }
        CUnitBase_exposer.staticmethod( "GetSendTable" );
        { //property "selectionpriority"[fget=::CUnitBase::GetSelectionPriority, fset=::CUnitBase::SetSelectionPriority]
        
            typedef int ( ::CUnitBase::*fget )(  ) ;
            typedef void ( ::CUnitBase::*fset )( int ) ;
            
            CUnitBase_exposer.add_property( 
                "selectionpriority"
                , fget( &::CUnitBase::GetSelectionPriority )
                , fset( &::CUnitBase::SetSelectionPriority ) );
        
        }
        { //property "attackpriority"[fget=::CUnitBase::GetAttackPriority, fset=::CUnitBase::SetAttackPriority]
        
            typedef int ( ::CUnitBase::*fget )(  ) ;
            typedef void ( ::CUnitBase::*fset )( int ) ;
            
            CUnitBase_exposer.add_property( 
                "attackpriority"
                , fget( &::CUnitBase::GetAttackPriority )
                , fset( &::CUnitBase::SetAttackPriority ) );
        
        }
        { //property "energy"[fget=::CUnitBase::GetEnergy, fset=::CUnitBase::SetEnergy]
        
            typedef int ( ::CUnitBase::*fget )(  ) const;
            typedef void ( ::CUnitBase::*fset )( int ) ;
            
            CUnitBase_exposer.add_property( 
                "energy"
                , fget( &::CUnitBase::GetEnergy )
                , fset( &::CUnitBase::SetEnergy ) );
        
        }
        { //property "maxenergy"[fget=::CUnitBase::GetMaxEnergy, fset=::CUnitBase::SetMaxEnergy]
        
            typedef int ( ::CUnitBase::*fget )(  ) const;
            typedef void ( ::CUnitBase::*fset )( int ) ;
            
            CUnitBase_exposer.add_property( 
                "maxenergy"
                , fget( &::CUnitBase::GetMaxEnergy )
                , fset( &::CUnitBase::SetMaxEnergy ) );
        
        }
        { //property "kills"[fget=::CUnitBase::GetKills, fset=::CUnitBase::SetKills]
        
            typedef int ( ::CUnitBase::*fget )(  ) const;
            typedef void ( ::CUnitBase::*fset )( int ) ;
            
            CUnitBase_exposer.add_property( 
                "kills"
                , fget( &::CUnitBase::GetKills )
                , fset( &::CUnitBase::SetKills ) );
        
        }
        { //property "animstate"[fget=::CUnitBase::PyGetAnimState, fset=::CUnitBase::SetAnimState]
        
            typedef ::boost::python::api::object ( ::CUnitBase::*fget )(  ) ;
            typedef void ( ::CUnitBase::*fset )( ::boost::python::api::object ) ;
            
            CUnitBase_exposer.add_property( 
                "animstate"
                , fget( &::CUnitBase::PyGetAnimState )
                , fset( &::CUnitBase::SetAnimState ) );
        
        }
        { //property "enemy"[fget=::CUnitBase::GetEnemy, fset=::CUnitBase::SetEnemy]
        
            typedef ::CBaseEntity * ( ::CUnitBase::*fget )(  ) ;
            typedef void ( ::CUnitBase::*fset )( ::CBaseEntity * ) ;
            
            CUnitBase_exposer.add_property( 
                "enemy"
                , bp::make_function( 
                      fget( &::CUnitBase::GetEnemy )
                    , bp::return_value_policy< bp::return_by_value >() ) 
                , fset( &::CUnitBase::SetEnemy ) );
        
        }
        { //property "crouching"[fget=::CUnitBase::IsCrouching, fset=::CUnitBase::SetCrouching]
        
            typedef bool ( ::CUnitBase::*fget )(  ) ;
            typedef void ( ::CUnitBase::*fset )( bool ) ;
            
            CUnitBase_exposer.add_property( 
                "crouching"
                , fget( &::CUnitBase::IsCrouching )
                , fset( &::CUnitBase::SetCrouching ) );
        
        }
        { //property "climbing"[fget=::CUnitBase::IsClimbing, fset=::CUnitBase::SetClimbing]
        
            typedef bool ( ::CUnitBase::*fget )(  ) ;
            typedef void ( ::CUnitBase::*fset )( bool ) ;
            
            CUnitBase_exposer.add_property( 
                "climbing"
                , fget( &::CUnitBase::IsClimbing )
                , fset( &::CUnitBase::SetClimbing ) );
        
        }
        { //property "navigator"[fget=::CUnitBase::PyGetNavigator, fset=::CUnitBase::SetNavigator]
        
            typedef ::boost::python::api::object ( ::CUnitBase::*fget )(  ) ;
            typedef void ( ::CUnitBase::*fset )( ::boost::python::api::object ) ;
            
            CUnitBase_exposer.add_property( 
                "navigator"
                , fget( &::CUnitBase::PyGetNavigator )
                , fset( &::CUnitBase::SetNavigator ) );
        
        }
        { //property "attacklosmask"[fget=::CUnitBase::GetAttackLOSMask, fset=::CUnitBase::SetAttackLOSMask]
        
            typedef int ( ::CUnitBase::*fget )(  ) ;
            typedef void ( ::CUnitBase::*fset )( int ) ;
            
            CUnitBase_exposer.add_property( 
                "attacklosmask"
                , fget( &::CUnitBase::GetAttackLOSMask )
                , fset( &::CUnitBase::SetAttackLOSMask ) );
        
        }
        { //property "garrisoned_building"[fget=::CUnitBase::GetGarrisonedBuilding, fset=::CUnitBase::SetGarrisonedBuilding]
        
            typedef ::CUnitBase * ( ::CUnitBase::*fget )(  ) ;
            typedef void ( ::CUnitBase::*fset )( ::CUnitBase * ) ;
            
            CUnitBase_exposer.add_property( 
                "garrisoned_building"
                , bp::make_function( 
                      fget( &::CUnitBase::GetGarrisonedBuilding )
                    , bp::return_value_policy< bp::return_by_value >() ) 
                , fset( &::CUnitBase::SetGarrisonedBuilding ) );
        
        }
        CUnitBase_exposer.add_property( "lifestate", &CUnitBase_wrapper::m_lifeState_Get, &CUnitBase_wrapper::m_lifeState_Set );
        CUnitBase_exposer.add_property( "takedamage", &CUnitBase_wrapper::m_takedamage_Get, &CUnitBase_wrapper::m_takedamage_Set );
        CUnitBase_exposer.add_property( "skin", &CUnitBase_wrapper::m_nSkin_Get, &CUnitBase_wrapper::m_nSkin_Set );
        CUnitBase_exposer.add_property( "eyepitch", &CUnitBase_wrapper::m_fEyePitch_Get, &CUnitBase_wrapper::m_fEyePitch_Set );
    }

}

